{"version":3,"sources":["../../../src/components/MinimizableWebChat.tsx"],"names":["MinimizableWebChat","props","webChatRef","React","createRef","handleStartDirectLine","bind","handleStopDirectLine","handleMaximizeButtonClick","handleMinimizeButtonClick","handleSwitchButtonClick","state","minimized","side","directLine","defaultDirectLine","messageUnreadCount","previewMessage","that","Store","ActionObservable","subscribe","action","type","WebChatToggleStateObservable","s","webchat","unreadTagRef","unreadTag","notifyUserAlreadyRead","unreadTagDomRef","unreadTagDom","logContainer","parentElement","closest","scrollbarAtTheBottom","clientHeight","scrollTop","scrollHeight","setTimeout","toogle","scrollToTag","moveToBottom","setState","unsubscribe","Configuration","get","directLineOptions","webSocket","pollingAutoClose","lastHistoryId","subscribeUnReadMessage","activity","payload","botId","from","id","toLowerCase","getState","msg","text","console","log","name","watermark","Math","max","value","count","config","webChatOptions","buttonOptions","headerOptions","buttonStyle","background","iconUrl","backgroundSize","visible","displayOnTheSide","display","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport WebChat from './WebChat'\nimport WebChatToggleStateObservable, { notify } from '../utils/WebChatToggleStateObservable'\nimport { createDirectLine, endDirectLine, getDirectLine } from '../utils/DirectLine'\nimport getRefObject from '../utils/getRefObject'\nimport Store from '../utils/Store'\nimport Configuration from '../utils/Configuration'\n\nimport '../styles/fabric-icons-inline.css'\nimport '../styles/MinimizableWebChat.css'\nimport PreviewMessage from './PreviewMessage'\n\ninterface MinimizableWebChatProps {\n    config: GSSWebChat.IWebChatConfig,\n    defaultDirectLine?: BotFrameworkWebChat.IDirectLine\n}\n\ninterface MinimizableWebChatState {\n    minimized: boolean,\n    side: string,\n    directLine: BotFrameworkWebChat.IDirectLine,\n    messageUnreadCount: number,\n    previewMessage: string\n}\n\nexport default class MinimizableWebChat extends React.Component<MinimizableWebChatProps, MinimizableWebChatState> {\n    webChatRef: React.RefObject<WebChat>\n\n    constructor(props: Readonly<MinimizableWebChatProps>) {\n        super(props)\n\n        this.webChatRef = React.createRef()\n\n        this.handleStartDirectLine = this.handleStartDirectLine.bind(this)\n        this.handleStopDirectLine = this.handleStopDirectLine.bind(this)\n        this.handleMaximizeButtonClick = this.handleMaximizeButtonClick.bind(this)\n        this.handleMinimizeButtonClick = this.handleMinimizeButtonClick.bind(this)\n        this.handleSwitchButtonClick = this.handleSwitchButtonClick.bind(this)\n\n        this.state = {\n            minimized: true,\n            side: 'right',\n            directLine: this.props.defaultDirectLine,\n            messageUnreadCount: 0,\n            previewMessage: null\n        }\n    }\n\n    componentDidMount() {\n        const that = this\n\n        Store.ActionObservable.subscribe(function subscribe(action) {\n            if (action.type === 'DIRECT_LINE/CONNECT_FULFILLED') {\n                WebChatToggleStateObservable.subscribe(async s => {\n                    const webchat = await getRefObject(that.webChatRef)\n                    const unreadTag = await getRefObject(webchat.unreadTagRef)\n\n                    if (s === 'open' && that.state.messageUnreadCount > 0) {\n                        Store.notifyUserAlreadyRead()\n\n                        const unreadTagDom = await getRefObject(unreadTag.unreadTagDomRef)\n                        const logContainer = unreadTagDom.parentElement.closest('div')\n                        const scrollbarAtTheBottom = logContainer.clientHeight + logContainer.scrollTop >= logContainer.scrollHeight\n\n                        setTimeout(() => unreadTag.toogle(true).scrollToTag(!scrollbarAtTheBottom))\n                    }\n                    else if (s === 'close') {\n                        unreadTag.moveToBottom().toogle(false)\n                    }\n\n                    that.setState({\n                        messageUnreadCount: 0\n                    })\n                })\n\n                Store.ActionObservable.unsubscribe(subscribe)\n            }\n        })\n\n        const { directLineOptions } = Configuration.get()\n\n        if (directLineOptions.webSocket || !directLineOptions.pollingAutoClose) {\n            let lastHistoryId: string = null\n            const subscribeUnReadMessage = () => {\n                Store.ActionObservable.subscribe(function subscribe(action) {\n                    if (action.type === 'DIRECT_LINE/INCOMING_ACTIVITY') {\n                        const { activity } = action.payload\n                        const { botId } = Configuration.get()\n\n                        if (activity.type === 'message'\n                            && activity.from?.id?.toLowerCase() === botId\n                            && WebChatToggleStateObservable.getState() === 'close') {\n\n                            var msg: string = activity.text ?? '您有一則非純文字訊息，請點選查看';\n\n                            that.setState((state) => ({\n                                messageUnreadCount: state.messageUnreadCount + 1,\n                                previewMessage: msg\n                            }))\n                        }\n                    }\n                })\n            }\n            console.log('subscribe UnReadInfo')\n            Store.ActionObservable.subscribe(function subscribe(action) {\n                if (action.type === 'DIRECT_LINE/INCOMING_ACTIVITY') {\n                    const { activity } = action.payload\n\n                    if (activity.type === 'event' && activity.name === 'UnReadInfo') {\n                        const directLine = getDirectLine()\n                        console.log('directLine.watermark = ' + directLine.watermark)\n                        directLine.watermark = Math.max(directLine.watermark, 0)\n\n                        lastHistoryId = activity.value.lastHistoryId\n\n                        if (lastHistoryId) {\n                            if (activity.value.count) {\n                                if (WebChatToggleStateObservable.getState() === 'open') {\n                                    Store.notifyUserAlreadyRead()\n                                }\n                                else {\n                                    that.setState((state) => ({\n                                        messageUnreadCount: state.messageUnreadCount + activity.value.count\n                                    }))\n                                }\n                            }\n                        }\n                        else {\n                            console.log('subscribe UnReadMessage')\n                            subscribeUnReadMessage()\n                            Store.ActionObservable.unsubscribe(subscribe)\n                        }\n                    }\n                    else if (activity.id === lastHistoryId) {\n                        console.log('subscribe UnReadMessage')\n                        subscribeUnReadMessage()\n                        Store.ActionObservable.unsubscribe(subscribe)\n                    }\n                }\n            })\n        }\n    }\n\n    async handleStartDirectLine() {\n        if (!this.state.directLine) {\n            const config = this.props.config\n\n            this.setState({ directLine: await createDirectLine(config.directLineOptions) })\n        }\n    }\n\n    async handleStopDirectLine() {\n        if (this.state.directLine) {\n            endDirectLine()\n            this.setState({ directLine: null })\n        }\n    }\n\n    handleMaximizeButtonClick() {\n        this.handleStartDirectLine()\n\n        this.setState(() => ({\n            minimized: false,\n            previewMessage: null\n        }))\n\n        notify('open')\n    }\n\n    handleMinimizeButtonClick() {\n        const directLineOptions = this.props.config.directLineOptions\n\n        if (!directLineOptions.webSocket && directLineOptions.pollingAutoClose) {\n            this.handleStopDirectLine()\n        }\n\n        this.setState(() => ({\n            minimized: true\n        }))\n\n        notify('close')\n    }\n\n    handleSwitchButtonClick() {\n        this.setState(({ side }) => ({\n            side: side === 'left' ? 'right' : 'left'\n        }))\n    }\n\n    getMessageUnreadCount() {\n        return this.state.messageUnreadCount\n    }\n\n    render() {\n        const {\n            props: {\n                config,\n                config: {\n                    webChatOptions: { buttonOptions, headerOptions }\n                }\n            },\n            state: { minimized, side, directLine, messageUnreadCount, previewMessage }\n        } = this\n\n        const buttonStyle = {\n            background: `url(${buttonOptions.iconUrl})`,\n            backgroundSize: 'cover'\n        }\n\n        return (\n            <div className=\"minimizable-web-chat\">\n                <PreviewMessage\n                    message={this.state.previewMessage}\n                    maximizeButton={this.handleMaximizeButtonClick}\n                />\n                <button\n                    className={`maximize ${(buttonOptions.visible && buttonOptions.displayOnTheSide) ? 'hide' : ''}`}\n                    onClick={this.handleMaximizeButtonClick}\n                    hidden={!minimized || !buttonOptions.visible}\n                    style={buttonStyle}\n                    message-unread-count={messageUnreadCount}\n                />\n                <div style={{ display: minimized ? 'none' : '' }} className={side === 'left' ? 'chat-box left' : 'chat-box right'}>\n                    <header>\n                        {\n                            headerOptions.iconUrl &&\n                            <img className=\"header-Icon\" src={headerOptions.iconUrl} onClick={this.handleMinimizeButtonClick} />\n                        }\n                        <div className=\"filler\" onClick={this.handleMinimizeButtonClick}>\n                            {headerOptions.text}\n                        </div>\n                        <button className=\"switch\" onClick={this.handleSwitchButtonClick}>\n                            <span className=\"ms-Icon ms-Icon--Switch\" />\n                        </button>\n                        <button className=\"minimize\" onClick={this.handleMinimizeButtonClick}>\n                            <span className=\"ms-Icon ms-Icon--ChromeMinimize\" />\n                        </button>\n                    </header>\n                    <WebChat\n                        ref={this.webChatRef}\n                        className=\"react-web-chat\"\n                        directLine={directLine}\n                        config={config}\n                    />\n                </div>\n            </div>\n        )\n    }\n}"],"file":"MinimizableWebChat.js"}