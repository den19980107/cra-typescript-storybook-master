{"version":3,"sources":["../../../src/components/WebChat.tsx"],"names":["props","createStyleSet","styleOptions","console","log","unreadTagRef","React","createRef","lastHistoryId","activityMiddleware","next","card","activity","name","type","id","value","firstUnreadId","className","directLine","config","userId","userName","webChatOptions","store","state","ReactWebChat","WebChat","webChatProps","userID","username","styleSet","forEach","k","createElement","Component"],"mappings":"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","sourcesContent":["import memoize from 'memoize-one';\nimport React from 'react';\nimport UnreadTag from './UnreadTag';\nimport WebChat, { createStyleSet } from 'botframework-webchat'\nimport '../styles/WebChat.css';\n\ninterface WebChatProps {\n  className?: string,\n  config: GSSWebChat.IWebChatConfig,\n  directLine: BotFrameworkWebChat.IDirectLine\n}\n\ninterface WebChatState {\n}\n\nexport default class extends React.Component<WebChatProps, WebChatState> {\n  createStyleSet: (styleOptions: BotFrameworkWebChat.IStyleOptions) => any;\n  activityMiddleware: any;\n  unreadTagRef: React.RefObject<UnreadTag>;\n\n  constructor(props: Readonly<WebChatProps>) {\n    super(props);\n\n    this.createStyleSet = memoize((styleOptions: BotFrameworkWebChat.IStyleOptions) => {\n      console.log('createStyleSet');\n\n      return createStyleSet(styleOptions);\n    });\n\n    this.unreadTagRef = React.createRef();\n\n    let lastHistoryId: string = null;\n\n    this.activityMiddleware = () => (next: any) => (card: { activity: { name: string; type: string; id: string; value: any; }; }) => {\n      const {\n        activity: { name, type, id, value }\n      } = card;\n\n      if (type === 'event' && name === 'UnReadInfo') {\n        lastHistoryId = value.lastHistoryId;\n        return () => <UnreadTag key={id} ref={this.unreadTagRef} firstUnreadId={value.firstUnreadId} lastHistoryId={value.lastHistoryId} />;\n      } else if (lastHistoryId && id === lastHistoryId) {\n        return (...renderArgs: any) => (\n          <div\n            key={id}\n            data-key={id}\n          >\n            {next(card)(...renderArgs)}\n          </div>\n        );\n      } else {\n        return next(card);\n      }\n    };\n  }\n\n  render() {\n    const {\n      props: { className, directLine,\n        config: { userId, userName,\n          webChatOptions: { store, styleOptions }\n        }\n      },\n      state: { }\n    } = this;\n\n    const ReactWebChat = WebChat.ReactWebChat || WebChat\n\n\n    let webChatProps: any = {\n      ...this.props.config,\n      userID: userId,\n      username: userName,\n      className: `${className || ''} web-chat`,\n      directLine: directLine,\n      store: store,\n      styleSet: this.createStyleSet(styleOptions),\n      activityMiddleware: this.activityMiddleware\n    };\n\n    ['botId', 'botName', 'userId', 'userName', 'directLineOptions', 'webChatOptions']\n      .forEach(k => delete webChatProps[k])\n\n    return (\n      directLine ?\n        React.createElement(ReactWebChat, webChatProps)\n        :\n        <div className={`${className || ''} connect-spinner`}>\n          <div className=\"content\">\n            <div className=\"icon\">\n              <span className=\"ms-Icon ms-Icon--Robot\" />\n            </div>\n            <p>連線中，請稍等。</p>\n          </div>\n        </div>\n    );\n  }\n}"],"file":"WebChat.js"}