{"version":3,"sources":["../../../src/components/WebChat.tsx"],"names":["WebChat","className","config","directLine","createStyleSet","activityMiddleware","unreadTagRef","styleOptions","console","log","React","createRef","lastHistoryId","next","card","activity","name","type","id","value","firstUnreadId","children","ReactWebChat","window","ReactWebChat_Package","webChatProps","userID","userId","username","userName","store","webChatOptions","styleSet","forEach","k","createElement"],"mappings":"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","sourcesContent":["import React, { ReactElement, useEffect } from 'react'\nimport memoize from 'memoize-one';\nimport UnreadTag from './UnreadTag';\nimport ReactWebChat_Package, { createStyleSet as BotFrameworkWebChat_createStyleSet } from 'botframework-webchat'\nimport '../styles/WebChat.css';\n\ninterface Props {\n  className?: string,\n  config: GSSWebChat.IWebChatConfig,\n  directLine: BotFrameworkWebChat.IDirectLine\n}\n\nexport default function WebChat({ className, config, directLine }: Props): ReactElement {\n  let createStyleSet: (styleOptions: BotFrameworkWebChat.IStyleOptions) => any;\n  let activityMiddleware: any\n  let unreadTagRef: React.RefObject<UnreadTag>;\n\n  createStyleSet = memoize((styleOptions: BotFrameworkWebChat.IStyleOptions) => {\n    console.log('createStyleSet');\n\n    return BotFrameworkWebChat_createStyleSet(styleOptions);\n  });\n\n\n  useEffect(() => {\n    unreadTagRef = React.createRef();\n\n    let lastHistoryId: string | null | undefined = null;\n\n    activityMiddleware = () => (next: (arg0: any) => (arg0: any) => React.ReactNode) => (card: { activity: { name: string; type: string; id: string; value: any; }; }) => {\n      const {\n        activity: { name, type, id, value }\n      } = card;\n\n      if (type === 'event' && name === 'UnReadInfo') {\n        lastHistoryId = value.lastHistoryId;\n        return () => <UnreadTag key={id} ref={unreadTagRef} firstUnreadId={value.firstUnreadId} lastHistoryId={value.lastHistoryId} />;\n      } else if (lastHistoryId && id === lastHistoryId) {\n        return (children: any) => (\n          <div\n            key={id}\n            data-key={id}\n          >\n            {next(card)(children)}\n          </div>\n        );\n      } else {\n        return next(card);\n      }\n    };\n  }, [])\n\n  /**\n   * 引入 ReactWebChat 有分兩種狀況：\n   * \n   * 1. 使用 webpack build 出來的 gss-webchat.js：\n   *    如果是使用 gss-webchat.js 需要在 html 中引入 botframework webchat-es5.js 的 cdn\n   *    所以 ReactWebChat 會從 window 中拿取\n   * \n   * 2. 使用 rollup.js build 出可以在其他 react 專案中以 component 引入的 gss-webchat-component.js：\n   *    使用 gss-webchat-component.js 則是需要 user 在自己的專案中安裝 botframework-webchat 的 npm 套件\n   *    所以 ReactWebChat 會從 package 中拿取\n   */\n\n  // 1. 使用 webpack build 出來的 gss-webchat.js\n  let { ReactWebChat } = window.WebChat;\n  if (!ReactWebChat) {\n    // 2. 使用 rollup.js build 出可以在其他 react 專案中以 component 引入的 gss-webchat-component.js\n    ReactWebChat = ReactWebChat_Package\n  }\n\n  let webChatProps: any = {\n    ...config,\n    userID: config.userId,\n    username: config.userName,\n    className: `${className || ''} web-chat`,\n    directLine: directLine,\n    store: config.webChatOptions.store,\n    styleSet: createStyleSet(config.webChatOptions.styleOptions),\n    activityMiddleware: activityMiddleware\n  };\n\n  ['botId', 'botName', 'userId', 'userName', 'directLineOptions', 'webChatOptions']\n    .forEach(k => delete webChatProps[k])\n\n  return (\n    directLine ?\n      React.createElement(ReactWebChat, webChatProps)\n      :\n      <div className={`${className || ''} connect-spinner`}>\n        <div className=\"content\">\n          <div className=\"icon\">\n            <span className=\"ms-Icon ms-Icon--Robot\" />\n          </div>\n          <p>連線中，請稍等。</p>\n        </div>\n      </div>\n  );\n}\n"],"file":"WebChat.js"}