{"version":3,"sources":["../../src/createMinimizableWebChat.tsx"],"names":["minimizableWebChatRef","React","createRef","createMinimizableWebChat","rawConfig","container","callback","document","createElement","body","appendChild","Configuration","initial","then","config","ReactDOM","render","WebChatAPI","WebChatToggleStateObservable","openWebChat","closeWebChat","startConversation","endConversation","getMessageUnreadCount","toggleWebChat","minimizableWebChat","handleStartDirectLine","handleStopDirectLine","display","handleMaximizeButtonClick","handleMinimizeButtonClick","current"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;AAEA,IAAMA,qBAA0D,gBAAGC,eAAMC,SAAN,EAAnE;;AAEA,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACC,SAAD,EAAuCC,SAAvC,EAAgEC,QAAhE,EAA6H;AAC1J,MAAI,CAACD,SAAL,EAAgB;AACZA,IAAAA,SAAS,GAAGE,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAZ;AACAD,IAAAA,QAAQ,CAACE,IAAT,CAAcC,WAAd,CAA0BL,SAA1B;AACH;;AAED,+BAAaA,SAAb;;AAEAM,yBAAcC,OAAd,CAAsBR,SAAtB,EAAiCS,IAAjC,CAAsC,UAACC,MAAD;AAAA,WAClCC,kBAASC,MAAT,eACI,6BAAC,2BAAD;AACI,MAAA,GAAG,EAAEhB,qBADT;AAEI,MAAA,MAAM,EAAEc;AAFZ,MADJ,EAKIT,SALJ,EAMIC,QANJ,CADkC;AAAA,GAAtC;;AAWA,yCACOW,mBADP;AAEIC,IAAAA,4BAA4B,EAA5BA,qCAFJ;AAGIC,IAAAA,WAAW,EAAXA,WAHJ;AAIIC,IAAAA,YAAY,EAAZA,YAJJ;AAKIC,IAAAA,iBAAiB,EAAjBA,iBALJ;AAMIC,IAAAA,eAAe,EAAfA,eANJ;AAOIC,IAAAA,qBAAqB,EAArBA;AAPJ;AASH,CA5BD;;AA8BA,IAAMJ,WAAW,GAAG,SAAdA,WAAc;AAAA,SAAMK,aAAa,CAAC,IAAD,CAAnB;AAAA,CAApB;;AACA,IAAMJ,YAAY,GAAG,SAAfA,YAAe;AAAA,SAAMI,aAAa,CAAC,KAAD,CAAnB;AAAA,CAArB;;AAEA,IAAMH,iBAAiB;AAAA,qEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACW,2BAAarB,qBAAb,CADX;;AAAA;AAChByB,YAAAA,kBADgB;AAGtBA,YAAAA,kBAAkB,CAACC,qBAAnB;;AAHsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAjBL,iBAAiB;AAAA;AAAA;AAAA,GAAvB;;AAMA,IAAMC,eAAe;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACa,2BAAatB,qBAAb,CADb;;AAAA;AACdyB,YAAAA,kBADc;AAGpBA,YAAAA,kBAAkB,CAACE,oBAAnB;AACAP,YAAAA,YAAY;;AAJQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfE,eAAe;AAAA;AAAA;AAAA,GAArB;AAOA;;;;;;AAIA,IAAME,aAAa;AAAA,sEAAG,kBAAOI,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACe,2BAAa5B,qBAAb,CADf;;AAAA;AACZyB,YAAAA,kBADY;;AAGlB,gBAAIG,OAAJ,EAAa;AACTH,cAAAA,kBAAkB,CAACI,yBAAnB;AACH,aAFD,MAEO;AACHJ,cAAAA,kBAAkB,CAACK,yBAAnB;AACH;;AAPiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbN,aAAa;AAAA;AAAA;AAAA,GAAnB;;AAUA,IAAMD,qBAAqB,GAAG,SAAxBA,qBAAwB,GAAM;AAChC,MAAME,kBAAkB,GAAGzB,qBAAqB,CAAC+B,OAAjD;AAEA,SAAON,kBAAkB,IAAIA,kBAAkB,CAACF,qBAAnB,EAAtB,IAAoE,CAA3E;AACH,CAJD;;eAMepB,wB","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport MinimizableWebChat from './components/MinimizableWebChat';\nimport Configuration from './utils/Configuration';\nimport getRefObject from './utils/getRefObject';\nimport { setContainer } from './utils/Container';\nimport WebChatAPI from './WebChatAPI';\nimport WebChatToggleStateObservable from './utils/WebChatToggleStateObservable';\n\nconst minimizableWebChatRef: React.RefObject<MinimizableWebChat> = React.createRef();\n\nconst createMinimizableWebChat = (rawConfig: GSSWebChat.IWebChatConfig, container?: HTMLElement, callback?: () => void): GSSWebChat.IMinimizableWebChatAPI => {\n    if (!container) {\n        container = document.createElement('div');\n        document.body.appendChild(container);\n    }\n\n    setContainer(container);\n\n    Configuration.initial(rawConfig).then((config) =>\n        ReactDOM.render(\n            <MinimizableWebChat\n                ref={minimizableWebChatRef}\n                config={config}\n            />,\n            container,\n            callback\n        )\n    );\n\n    return {\n        ...WebChatAPI,\n        WebChatToggleStateObservable,\n        openWebChat,\n        closeWebChat,\n        startConversation,\n        endConversation,\n        getMessageUnreadCount\n    };\n}\n\nconst openWebChat = () => toggleWebChat(true);\nconst closeWebChat = () => toggleWebChat(false);\n\nconst startConversation = async () => {\n    const minimizableWebChat = await getRefObject(minimizableWebChatRef);\n\n    minimizableWebChat.handleStartDirectLine();\n}\n\nconst endConversation = async () => {\n    const minimizableWebChat = await getRefObject(minimizableWebChatRef);\n\n    minimizableWebChat.handleStopDirectLine();\n    closeWebChat();\n}\n\n/**\n * Display or hide the WebChat.\n * @param display Use true to show the element or false to hide it.\n */\nconst toggleWebChat = async (display: boolean) => {\n    const minimizableWebChat = await getRefObject(minimizableWebChatRef);\n\n    if (display) {\n        minimizableWebChat.handleMaximizeButtonClick();\n    } else {\n        minimizableWebChat.handleMinimizeButtonClick();\n    }\n}\n\nconst getMessageUnreadCount = () => {\n    const minimizableWebChat = minimizableWebChatRef.current;\n\n    return minimizableWebChat && minimizableWebChat.getMessageUnreadCount() || 0;\n}\n\nexport default createMinimizableWebChat;"],"file":"createMinimizableWebChat.js"}