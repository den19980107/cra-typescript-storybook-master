{"version":3,"sources":["../../../src/utils/Store.ts"],"names":["store","createStore","console","log","lastHistoryId","historyAlredyLoad","notifyConnectFulfilledObservers","window","WebChat","dispatch","next","action","type","Storage","setConversationId","conversationId","setUserId","Configuration","get","userId","activity","payload","name","value","Container","isWebChatVisible","setTimeout","notifyUserAlreadyRead","id","connectFulfilledObservers","forEach","observer","actionObservers","getStore","sendMessage","text","storeDispatch","sendPostback","sendEvent","sendAnalytics","metric","subMetric","setSendBox","setLanguage","language","DirectLine","getWatermark","watermark","meta","connectFulfilledSubscribe","f","push","directLine","connectionStatus$","connectFulfilledUnsubscribe","filter","subscriber","actionSubscribe","actionUnsubscribe","ActionObservable","subscribe","unsubscribe","ConnectFulfilledObservable"],"mappings":"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","sourcesContent":["import DirectLine, { getDirectLine } from './DirectLine';\nimport Storage from './Storage';\nimport Configuration from './Configuration';\nimport Container from './Container';\n\nlet store: BotFrameworkWebChat.IStore = null;\n\nconst createStore = (): BotFrameworkWebChat.IStore => {\n    console.log('==========createStore============');\n\n    let lastHistoryId = '';\n    let historyAlredyLoad = false;\n    let notifyConnectFulfilledObservers = false;\n\n    store = window.WebChat.createStore({}, ({ dispatch }: { dispatch: any }) => (next: (arg0: any) => void) => (action: { type: string; payload: any; }) => {\n        console.log(action.type);\n\n        if (action.type === 'DIRECT_LINE/CONNECT_FULFILLED') {\n            notifyConnectFulfilledObservers = false;\n            Storage.setConversationId(getDirectLine().conversationId);\n            Storage.setUserId(Configuration.get().userId);\n            console.log('getDirectLine().conversationId: ' + getDirectLine().conversationId);\n        }\n        else if (action.type === 'DIRECT_LINE/INCOMING_ACTIVITY') {\n            const { activity } = action.payload;\n\n            if (activity.type === 'event' && activity.name === 'UnReadInfo') {\n                lastHistoryId = activity.value.lastHistoryId;\n                historyAlredyLoad = !lastHistoryId;\n            }\n            else if (historyAlredyLoad && Container.isWebChatVisible()) {\n                setTimeout(notifyUserAlreadyRead)\n            }\n            else if (lastHistoryId && activity.id === lastHistoryId) {\n                historyAlredyLoad = true;\n                lastHistoryId = null;\n            }\n        }\n\n        if (historyAlredyLoad && !notifyConnectFulfilledObservers) {\n            console.log('notify connectFulfilledObservers.');\n            notifyConnectFulfilledObservers = true;\n            setTimeout(() => connectFulfilledObservers.forEach(observer => observer()));\n        }\n\n        actionObservers.forEach(observer => observer(action));\n\n        return next(action);\n    });\n\n    return store;\n}\n\nconst getStore = () => store;\n\n/* actions */\n//ref: https://github.com/Microsoft/BotFramework-WebChat/tree/master/packages/core/src/actions\n\nconst sendMessage = (text: string) => {\n    storeDispatch({\n        type: 'WEB_CHAT/SEND_MESSAGE',\n        payload: { text }\n    });\n}\n\nconst sendPostback = (value: any) => {\n    storeDispatch({\n        type: 'WEB_CHAT/SEND_POST_BACK',\n        payload: { value }\n    });\n}\n\nconst sendEvent = ({ name, value }: { name: string, value: any }) => {\n    storeDispatch({\n        type: 'WEB_CHAT/SEND_EVENT',\n        payload: { name, value }\n    });\n}\n\nconst sendAnalytics = (metric: string, subMetric?: string) => {\n    sendEvent({ name: 'bot_analytics', value: { metric, subMetric } })\n}\n\nconst setSendBox = (text: string) => {\n    storeDispatch({\n        type: 'WEB_CHAT/SET_SEND_BOX',\n        payload: { text }\n    });\n}\n\nconst setLanguage = (language: string) => {\n    storeDispatch({\n        type: 'WEB_CHAT/SET_LANGUAGE',\n        payload: { language }\n    });\n}\n\nconst notifyUserAlreadyRead = () => {\n    console.log('notifyUserAlreadyRead watermark: ' + DirectLine.getWatermark());\n    sendEvent({\n        name: 'UserAlreadyRead',\n        value: {\n            watermark: DirectLine.getWatermark()\n        }\n    });\n}\n\n// store dispatch.\nconst storeDispatch = ({ type, payload, meta }: { type: string, payload: object, meta?: object }) => {\n    store && store.dispatch({\n        type,\n        payload,\n        meta\n    });\n}\n\nlet connectFulfilledObservers: (() => void)[] = [];\nconst connectFulfilledSubscribe = (f: () => void) => {\n    connectFulfilledObservers.push(f);\n\n    const directLine = getDirectLine();\n\n    //connectionStatus$(2) === Online\n    if (directLine && directLine.connectionStatus$.value === 2) f();\n}\n\nconst connectFulfilledUnsubscribe = (f: () => void) => connectFulfilledObservers = connectFulfilledObservers.filter(subscriber => subscriber !== f);\n\nlet actionObservers: ((action: any) => void)[] = [];\nconst actionSubscribe = (f: (action: any) => void) => actionObservers.push(f);\nconst actionUnsubscribe = (f: (action: any) => void) => actionObservers = actionObservers.filter(subscriber => subscriber !== f);\n\nexport default {\n    sendAnalytics,\n    sendEvent,\n    sendMessage,\n    sendPostback,\n    setLanguage,\n    setSendBox,\n    notifyUserAlreadyRead,\n    ActionObservable: {\n        subscribe: actionSubscribe,\n        unsubscribe: actionUnsubscribe\n    },\n    ConnectFulfilledObservable: {\n        subscribe: connectFulfilledSubscribe,\n        unsubscribe: connectFulfilledUnsubscribe\n    }\n};\n\nexport {\n    createStore,\n    getStore,\n    storeDispatch\n};"],"file":"Store.js"}