{"version":3,"sources":["../../../src/components/UnreadTag.tsx"],"names":["firstUnreadId","lastHistoryId","React","constructor","console","visible","componentDidMount","that","createMessageMutationObserver","mutation","observer","Store","action","activity","setTimeout","toogle","display","moveToBottom","unreadTag","scrollToTag","logContainer","scroll","Math","render"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Store from '../utils/Store'\nimport createMessageMutationObserver from '../utils/createMessageMutationObserver'\n\ninterface UnreadTagProps {\n    firstUnreadId: string,\n    lastHistoryId: string\n}\n\ninterface UnreadTagState {\n    visible: boolean\n}\n\nexport default class extends React.Component<UnreadTagProps, UnreadTagState> {\n    unreadTagDomRef: React.RefObject<HTMLDivElement>\n\n    constructor(props: Readonly<UnreadTagProps>) {\n        super(props)\n        console.log('UnreadTag constructor.')\n\n        this.unreadTagDomRef = React.createRef()\n\n        this.toogle = this.toogle.bind(this)\n        this.moveToBottom = this.moveToBottom.bind(this)\n        this.scrollToTag = this.scrollToTag.bind(this)\n\n        this.state = {\n            visible: false\n        }\n    }\n\n    componentDidMount() {\n        const that = this\n        let { firstUnreadId, lastHistoryId } = this.props\n\n        if (firstUnreadId) {\n            // 使用 MutationObserver 當 dom rendered 後再調整 scrollbar。\n            createMessageMutationObserver((mutation: HTMLLIElement, observer: MutationObserver) => {\n                if (mutation.hasChildNodes && mutation.firstElementChild.getAttribute('data-key') === this.props.lastHistoryId) {\n                    observer.disconnect()\n                    this.scrollToTag(false)\n                }\n            })\n        }\n\n        Store.ActionObservable.subscribe(function subscribe(action) {\n            console.log('UnreadTag ActionObservable.')\n\n            if (action.type === 'DIRECT_LINE/INCOMING_ACTIVITY') {\n                const { activity } = action.payload\n\n                if (firstUnreadId && activity.id === firstUnreadId) {\n                    that.moveToBottom().toogle(true)\n                    firstUnreadId = null\n                    lastHistoryId = null\n                }\n                else if (lastHistoryId && activity.id === lastHistoryId) {\n                    setTimeout(() => that.moveToBottom())\n                    lastHistoryId = null\n                }\n\n                if (!firstUnreadId && !lastHistoryId) {\n                    Store.ActionObservable.unsubscribe(subscribe)\n                }\n            }\n        })\n    }\n\n    toogle(display: boolean) {\n        this.setState({ visible: display })\n\n        return this\n    }\n\n    moveToBottom() {\n        const unreadTag = this.unreadTagDomRef.current\n        console.log('moveToBottom')\n        unreadTag.closest('ul').append(unreadTag.closest('li'))\n\n        return this\n    }\n\n    scrollToTag(immediatelyInvoked: boolean) {\n        const unreadTag = this.unreadTagDomRef.current\n        const logContainer = unreadTag.parentElement.closest('div')\n\n        //判斷是否有 scrollbar\n        if (logContainer.scrollHeight > logContainer.clientHeight) {\n            if (immediatelyInvoked) {\n                scroll()\n            }\n            else {\n                logContainer.addEventListener('scroll', function waitHistoryLoaded() {\n                    // 載完對話後，webchat 會做 scrollToEnd，這時候再將 scrollbar 定位到 unread tag。\n                    if (logContainer.clientHeight + logContainer.scrollTop >= logContainer.scrollHeight) {\n                        scroll()\n                        logContainer.removeEventListener('scroll', waitHistoryLoaded)\n                    }\n                })\n            }\n        }\n\n        function scroll() {\n            logContainer.scrollTop = Math.max(unreadTag.offsetTop - 30, 0)\n        }\n\n        return this\n    }\n\n    //tag style ref: \n    //'border:2px #ccc solidborder-radius:10pxwidth:90%height: 20pxbackground-color:#eeetext-align: centermargin: auto'\n\n    render() {\n        const { visible } = this.state\n\n        return <div ref={this.unreadTagDomRef} className=\"unread-tag\" hidden={!visible}>以下爲尚未閱讀的訊息</div>\n    }\n}"],"file":"UnreadTag.js"}