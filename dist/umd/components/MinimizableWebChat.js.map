{"version":3,"sources":["../../../src/components/MinimizableWebChat.tsx"],"names":["React","constructor","minimized","side","directLine","messageUnreadCount","previewMessage","componentDidMount","that","Store","action","WebChatToggleStateObservable","webchat","getRefObject","unreadTag","s","unreadTagDom","logContainer","scrollbarAtTheBottom","setTimeout","directLineOptions","Configuration","lastHistoryId","subscribeUnReadMessage","activity","botId","msg","state","console","Math","count","config","createDirectLine","endDirectLine","handleMaximizeButtonClick","notify","handleMinimizeButtonClick","handleSwitchButtonClick","getMessageUnreadCount","render","props","webChatOptions","headerOptions","buttonStyle","background","buttonOptions","iconUrl","backgroundSize","display"],"mappings":"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","sourcesContent":["import React from 'react'\nimport WebChat from './WebChat'\nimport WebChatToggleStateObservable, { notify } from '../utils/WebChatToggleStateObservable'\nimport { createDirectLine, endDirectLine, getDirectLine } from '../utils/DirectLine'\nimport getRefObject from '../utils/getRefObject'\nimport Store from '../utils/Store'\nimport Configuration from '../utils/Configuration'\n\nimport '../styles/fabric-icons-inline.css'\nimport '../styles/MinimizableWebChat.css'\nimport PreviewMessage from './PreviewMessage'\n\ninterface MinimizableWebChatProps {\n    config: GSSWebChat.IWebChatConfig,\n    defaultDirectLine?: BotFrameworkWebChat.IDirectLine\n}\n\ninterface MinimizableWebChatState {\n    minimized: boolean,\n    side: string,\n    directLine: BotFrameworkWebChat.IDirectLine,\n    messageUnreadCount: number,\n    previewMessage: string\n}\n\nexport default class MinimizableWebChat extends React.Component<MinimizableWebChatProps, MinimizableWebChatState> {\n    webChatRef: React.RefObject<WebChat>\n\n    constructor(props: Readonly<MinimizableWebChatProps>) {\n        super(props)\n\n        this.webChatRef = React.createRef()\n\n        this.handleStartDirectLine = this.handleStartDirectLine.bind(this)\n        this.handleStopDirectLine = this.handleStopDirectLine.bind(this)\n        this.handleMaximizeButtonClick = this.handleMaximizeButtonClick.bind(this)\n        this.handleMinimizeButtonClick = this.handleMinimizeButtonClick.bind(this)\n        this.handleSwitchButtonClick = this.handleSwitchButtonClick.bind(this)\n\n        this.state = {\n            minimized: true,\n            side: 'right',\n            directLine: this.props.defaultDirectLine,\n            messageUnreadCount: 0,\n            previewMessage: null\n        }\n    }\n\n    componentDidMount() {\n        const that = this\n\n        Store.ActionObservable.subscribe(function subscribe(action) {\n            if (action.type === 'DIRECT_LINE/CONNECT_FULFILLED') {\n                WebChatToggleStateObservable.subscribe(async s => {\n                    const webchat = await getRefObject(that.webChatRef)\n                    const unreadTag = await getRefObject(webchat.unreadTagRef)\n\n                    if (s === 'open' && that.state.messageUnreadCount > 0) {\n                        Store.notifyUserAlreadyRead()\n\n                        const unreadTagDom = await getRefObject(unreadTag.unreadTagDomRef)\n                        const logContainer = unreadTagDom.parentElement.closest('div')\n                        const scrollbarAtTheBottom = logContainer.clientHeight + logContainer.scrollTop >= logContainer.scrollHeight\n\n                        setTimeout(() => unreadTag.toogle(true).scrollToTag(!scrollbarAtTheBottom))\n                    }\n                    else if (s === 'close') {\n                        unreadTag.moveToBottom().toogle(false)\n                    }\n\n                    that.setState({\n                        messageUnreadCount: 0\n                    })\n                })\n\n                Store.ActionObservable.unsubscribe(subscribe)\n            }\n        })\n\n        const { directLineOptions } = Configuration.get()\n\n        if (directLineOptions.webSocket || !directLineOptions.pollingAutoClose) {\n            let lastHistoryId: string = null\n            const subscribeUnReadMessage = () => {\n                Store.ActionObservable.subscribe(function subscribe(action) {\n                    if (action.type === 'DIRECT_LINE/INCOMING_ACTIVITY') {\n                        const { activity } = action.payload\n                        const { botId } = Configuration.get()\n\n                        if (activity.type === 'message'\n                            && activity.from?.id?.toLowerCase() === botId\n                            && WebChatToggleStateObservable.getState() === 'close') {\n\n                            var msg: string = activity.text ?? '您有一則非純文字訊息，請點選查看';\n                            \n                            that.setState((state) => ({\n                                messageUnreadCount: state.messageUnreadCount + 1,\n                                previewMessage: msg\n                            }))\n                        }\n                    }\n                })\n            }\n            console.log('subscribe UnReadInfo')\n            Store.ActionObservable.subscribe(function subscribe(action) {\n                if (action.type === 'DIRECT_LINE/INCOMING_ACTIVITY') {\n                    const { activity } = action.payload\n\n                    if (activity.type === 'event' && activity.name === 'UnReadInfo') {\n                        const directLine = getDirectLine()\n                        console.log('directLine.watermark = ' + directLine.watermark)\n                        directLine.watermark = Math.max(directLine.watermark, 0)\n\n                        lastHistoryId = activity.value.lastHistoryId\n\n                        if (lastHistoryId) {\n                            if (activity.value.count){\n                                if (WebChatToggleStateObservable.getState() === 'open') {\n                                    Store.notifyUserAlreadyRead()\n                                }\n                                else {\n                                    that.setState((state) => ({\n                                        messageUnreadCount: state.messageUnreadCount + activity.value.count\n                                    }))\n                                }\n                            }\n                        }\n                        else {\n                            console.log('subscribe UnReadMessage')\n                            subscribeUnReadMessage()\n                            Store.ActionObservable.unsubscribe(subscribe)\n                        }\n                    }\n                    else if (activity.id === lastHistoryId) {\n                        console.log('subscribe UnReadMessage')\n                        subscribeUnReadMessage()\n                        Store.ActionObservable.unsubscribe(subscribe)\n                    }\n                }\n            })\n        }\n    }\n\n    async handleStartDirectLine() {\n        if (!this.state.directLine) {\n            const config = this.props.config\n\n            this.setState({ directLine: await createDirectLine(config.directLineOptions) })\n        }\n    }\n\n    async handleStopDirectLine() {\n        if (this.state.directLine) {\n            endDirectLine()\n            this.setState({ directLine: null })\n        }\n    }\n\n    handleMaximizeButtonClick() {\n        this.handleStartDirectLine()\n\n        this.setState(() => ({\n            minimized: false,\n            previewMessage: null\n        }))\n\n        notify('open')\n    }\n\n    handleMinimizeButtonClick() {\n        const directLineOptions = this.props.config.directLineOptions\n\n        if (!directLineOptions.webSocket && directLineOptions.pollingAutoClose) {\n            this.handleStopDirectLine()\n        }\n\n        this.setState(() => ({\n            minimized: true\n        }))\n\n        notify('close')\n    }\n\n    handleSwitchButtonClick() {\n        this.setState(({ side }) => ({\n            side: side === 'left' ? 'right' : 'left'\n        }))\n    }\n\n    getMessageUnreadCount() {\n        return this.state.messageUnreadCount\n    }\n\n    render() {\n        const {\n            props: {\n                config,\n                config: {\n                    webChatOptions: { buttonOptions, headerOptions }\n                }\n            },\n            state: { minimized, side, directLine, messageUnreadCount, previewMessage }\n        } = this\n\n        const buttonStyle = {\n            background: `url(${buttonOptions.iconUrl})`,\n            backgroundSize: 'cover'\n        }\n\n        return (\n            <div className=\"minimizable-web-chat\">\n                <PreviewMessage \n                    message = {this.state.previewMessage}\n                    maximizeButton = {this.handleMaximizeButtonClick}\n                />\n                <button\n                    className={`maximize ${(buttonOptions.visible && buttonOptions.displayOnTheSide) ? 'hide' : ''}`}\n                    onClick={this.handleMaximizeButtonClick}\n                    hidden={!minimized || !buttonOptions.visible}\n                    style={buttonStyle}\n                    message-unread-count={messageUnreadCount}\n                />\n                <div style={{ display: minimized ? 'none' : '' }} className={side === 'left' ? 'chat-box left' : 'chat-box right'}>\n                    <header>\n                        {\n                            headerOptions.iconUrl &&\n                            <img className=\"header-Icon\" src={headerOptions.iconUrl} onClick={this.handleMinimizeButtonClick} />\n                        }\n                        <div className=\"filler\" onClick={this.handleMinimizeButtonClick}>\n                            {headerOptions.text}\n                        </div>\n                        <button className=\"switch\" onClick={this.handleSwitchButtonClick}>\n                            <span className=\"ms-Icon ms-Icon--Switch\" />\n                        </button>\n                        <button className=\"minimize\" onClick={this.handleMinimizeButtonClick}>\n                            <span className=\"ms-Icon ms-Icon--ChromeMinimize\" />\n                        </button>\n                    </header>\n                    <WebChat\n                        ref={this.webChatRef}\n                        className=\"react-web-chat\"\n                        directLine={directLine}\n                        config={config}\n                    />\n                </div>\n            </div>\n        )\n    }\n}"],"file":"MinimizableWebChat.js"}