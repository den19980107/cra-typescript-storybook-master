{"version":3,"sources":["../../../src/components/PreviewMessage.tsx"],"names":["message","PreviewMessage","constructor","isVisable","checkIsVisable","closeMessage","e","maximizeButton","handleCloseButtonVisbility","document","componentWillReceiveProps","render","previewMsgStyle","display","position","right","bottom","width","justifyContent","buttonStyle"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport '../styles/fabric-icons-inline.css';\nimport '../styles/PreviewMessage.css'\n\ninterface PreviewMessageProps {\n   message: string,\n   maximizeButton: Function\n}\n\ninterface PreviewMessageState {\n   isVisable: boolean\n}\n\nclass PreviewMessage extends Component<PreviewMessageProps, PreviewMessageState> {\n   constructor(props: Readonly<PreviewMessageProps>) {\n      super(props)\n      this.checkIsVisable = this.checkIsVisable.bind(this);\n      this.closeMessage = this.closeMessage.bind(this);\n      this.maximizeButton = this.maximizeButton.bind(this);\n\n      this.state = {\n         isVisable: true\n      }\n   }\n\n   checkIsVisable() {\n      if (this.state.isVisable && this.props.message && this.props.message != \"\") {\n         return \"flex\";\n      }\n      \n      return \"none\";\n   }\n\n   closeMessage(e: any) {\n      e.preventDefault();\n      this.setState({ isVisable: false })\n   }\n\n   /** 觸發聊天室窗開啟功能 */\n   maximizeButton() {\n      this.props.maximizeButton();\n   }\n\n   /** 控制預覽視窗關閉按鈕顯示 */\n   handleCloseButtonVisbility(e: any) {\n      document.getElementById('close-btn').style.display = (e.type === 'mouseenter') ? 'block' : 'none';\n   }\n\n   componentWillReceiveProps() {\n      this.setState({ isVisable: true })\n   }\n\n   render() {\n      const previewMsgStyle = {\n         display: this.checkIsVisable(), \n         position: \"absolute\", \n         right: \"125px\", \n         bottom: \"35px\", \n         width: \"350px\", \n         justifyContent: \"flex-end\"\n      } as React.CSSProperties;\n\n      const buttonStyle = {\n         display: 'none'\n      };\n\n      return (\n         <div style={previewMsgStyle} onMouseEnter={this.handleCloseButtonVisbility} onMouseLeave={this.handleCloseButtonVisbility}>\n            <button id=\"close-btn\" onClick={this.closeMessage} style={buttonStyle}>\n               <div id=\"close-btn-background\">\n                  <span className=\"ms-Icon ms-Icon--Cancel\" id=\"close-btn-icon\"></span>\n               </div>\n            </button>\n            <div id=\"message-wrapper\" onClick={this.maximizeButton}>\n               <span className=\"message-box-bump\"></span>\n               <div className=\"message-box\">\n                  <div className=\"message\">\n                     <span>{this.props.message}</span>\n                  </div>\n               </div>\n            </div>\n         </div>\n      );\n   }\n}\n\nexport default PreviewMessage;"],"file":"PreviewMessage.js"}