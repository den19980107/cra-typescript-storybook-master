{"version":3,"sources":["../../../src/components/WebChat.tsx"],"names":["className","directLine","createStyleSet","memoize","styleOptions","console","BotFrameworkWebChat_createStyleSet","useEffect","unreadTagRef","React","lastHistoryId","activityMiddleware","next","card","activity","value","type","name","id","children","ReactWebChat","window","webChatProps","userID","config","username","store","styleSet","k"],"mappings":";;;;;;;;;;;;;;;;;;oBAYe,O;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,WAAA,OAAA,CAAiB;AAAA,IAAA,SAAA;AAAA,IAAA,MAAA;AAAqBC,IAAAA;AAArB,GAAjB,EAAyE;AACtF,QAAA,cAAA;AACA,QAAA,kBAAA;AACA,QAAA,YAAA;AAEAC,IAAAA,cAAc,GAAGC,0BAASC,YAAD,IAAqD;AAC5EC,MAAAA,OAAO,CAAPA,GAAAA,CAAAA,gBAAAA;AAEA,aAAOC,yCAAP,YAAOA,CAAP;AAHFJ,KAAiBC,CAAjBD;AAOAK,0BAAU,MAAM;AACdC,MAAAA,YAAY,GAAA,aAAGC,gBAAfD,SAAeC,EAAfD;AAEA,UAAIE,aAAwC,GAA5C,IAAA;;AAEAC,MAAAA,kBAAkB,GAAG,MAAOC,IAAD,IAA0DC,IAAD,IAAkF;AACpK,cAAM;AACJC,UAAAA,QAAQ,EAAE;AAAA,YAAA,IAAA;AAAA,YAAA,IAAA;AAAA,YAAA,EAAA;AAAkBC,YAAAA;AAAlB;AADN,YAAN,IAAA;;AAIA,YAAIC,IAAI,KAAJA,OAAAA,IAAoBC,IAAI,KAA5B,YAAA,EAA+C;AAC7CP,UAAAA,aAAa,GAAGK,KAAK,CAArBL,aAAAA;AACA,iBAAO,MAAA,aAAM,gBAAA,aAAA,CAAA,mBAAA,EAAA;AAAW,YAAA,GAAG,EAAd,EAAA;AAAoB,YAAA,GAAG,EAAvB,YAAA;AAAuC,YAAA,aAAa,EAAEK,KAAK,CAA3D,aAAA;AAA2E,YAAA,aAAa,EAAEA,KAAK,CAACL;AAAhG,WAAA,CAAb;AAFF,SAAA,MAGO,IAAIA,aAAa,IAAIQ,EAAE,KAAvB,aAAA,EAA2C;AAChD,iBAAQC,QAAD,IAAA,aACL,gBAAA,aAAA,CAAA,KAAA,EAAA;AACE,YAAA,GAAG,EADL,EAAA;AAEE,wBAAUD;AAFZ,WAAA,EAIGN,IAAI,CAAJA,IAAI,CAAJA,CALL,QAKKA,CAJH,CADF;AADK,SAAA,MASA;AACL,iBAAOA,IAAI,CAAX,IAAW,CAAX;AACD;AAnBHD,OAAAA;AALO,KAATJ,EAAAA,EAAAA;AA4BA;;;;;;;;;;;AAYA;;AACA,QAAI;AAAEa,MAAAA;AAAF,QAAmBC,MAAM,CAA7B,OAAA;;AACA,QAAI,CAAJ,YAAA,EAAmB;AACjB;AACAD,MAAAA,YAAY,GAAZA,6BAAAA;AACD;;AAED,QAAIE,YAAiB,GAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,MAAA,CAAA,EAAA,EAAA,EAAA;AAEnBC,MAAAA,MAAM,EAAEC,MAAM,CAFK,MAAA;AAGnBC,MAAAA,QAAQ,EAAED,MAAM,CAHG,QAAA;AAInBxB,MAAAA,SAAS,EAAG,GAAEA,SAAS,IAAI,EAJR,WAAA;AAKnBC,MAAAA,UAAU,EALS,UAAA;AAMnByB,MAAAA,KAAK,EAAEF,MAAM,CAANA,cAAAA,CANY,KAAA;AAOnBG,MAAAA,QAAQ,EAAEzB,cAAc,CAACsB,MAAM,CAANA,cAAAA,CAPN,YAOK,CAPL;AAQnBb,MAAAA,kBAAkB,EAAEA;AARD,KAAA,CAArB;;AAWA,KAAA,OAAA,EAAA,SAAA,EAAA,QAAA,EAAA,UAAA,EAAA,mBAAA,EAAA,gBAAA,EAAA,OAAA,CACWiB,CAAC,IAAI,OAAON,YAAY,CADnC,CACmC,CADnC;AAGA,WACErB,UAAU,GAAA,aACRQ,gBAAAA,aAAAA,CAAAA,YAAAA,EADQ,YACRA,CADQ,GAAA,aAGR,gBAAA,aAAA,CAAA,KAAA,EAAA;AAAK,MAAA,SAAS,EAAG,GAAET,SAAS,IAAI,EAAG;AAAnC,KAAA,EAAA,aACE,gBAAA,aAAA,CAAA,KAAA,EAAA;AAAK,MAAA,SAAS,EAAC;AAAf,KAAA,EAAA,aACE,gBAAA,aAAA,CAAA,KAAA,EAAA;AAAK,MAAA,SAAS,EAAC;AAAf,KAAA,EAAA,aACE,gBAAA,aAAA,CAAA,MAAA,EAAA;AAAM,MAAA,SAAS,EAAC;AAAhB,KAAA,CADF,CADF,EAAA,aAIE,gBAAA,aAAA,CAAA,GAAA,EAAA,IAAA,EATR,kDASQ,CAJF,CADF,CAJJ;AAaD;;;AA3FCA,IAAAA,S","sourcesContent":["import React, { ReactElement, useEffect } from 'react'\nimport memoize from 'memoize-one';\nimport UnreadTag from './UnreadTag';\nimport ReactWebChat_Package, { createStyleSet as BotFrameworkWebChat_createStyleSet } from 'botframework-webchat'\nimport '../styles/WebChat.css';\n\ninterface Props {\n  className?: string,\n  config: GSSWebChat.IWebChatConfig,\n  directLine: BotFrameworkWebChat.IDirectLine\n}\n\nexport default function WebChat({ className, config, directLine }: Props): ReactElement {\n  let createStyleSet: (styleOptions: BotFrameworkWebChat.IStyleOptions) => any;\n  let activityMiddleware: any\n  let unreadTagRef: React.RefObject<UnreadTag>;\n\n  createStyleSet = memoize((styleOptions: BotFrameworkWebChat.IStyleOptions) => {\n    console.log('createStyleSet');\n\n    return BotFrameworkWebChat_createStyleSet(styleOptions);\n  });\n\n\n  useEffect(() => {\n    unreadTagRef = React.createRef();\n\n    let lastHistoryId: string | null | undefined = null;\n\n    activityMiddleware = () => (next: (arg0: any) => (arg0: any) => React.ReactNode) => (card: { activity: { name: string; type: string; id: string; value: any; }; }) => {\n      const {\n        activity: { name, type, id, value }\n      } = card;\n\n      if (type === 'event' && name === 'UnReadInfo') {\n        lastHistoryId = value.lastHistoryId;\n        return () => <UnreadTag key={id} ref={unreadTagRef} firstUnreadId={value.firstUnreadId} lastHistoryId={value.lastHistoryId} />;\n      } else if (lastHistoryId && id === lastHistoryId) {\n        return (children: any) => (\n          <div\n            key={id}\n            data-key={id}\n          >\n            {next(card)(children)}\n          </div>\n        );\n      } else {\n        return next(card);\n      }\n    };\n  }, [])\n\n  /**\n   * 引入 ReactWebChat 有分兩種狀況：\n   * \n   * 1. 使用 webpack build 出來的 gss-webchat.js：\n   *    如果是使用 gss-webchat.js 需要在 html 中引入 botframework webchat-es5.js 的 cdn\n   *    所以 ReactWebChat 會從 window 中拿取\n   * \n   * 2. 使用 rollup.js build 出可以在其他 react 專案中以 component 引入的 gss-webchat-component.js：\n   *    使用 gss-webchat-component.js 則是需要 user 在自己的專案中安裝 botframework-webchat 的 npm 套件\n   *    所以 ReactWebChat 會從 package 中拿取\n   */\n\n  // 1. 使用 webpack build 出來的 gss-webchat.js\n  let { ReactWebChat } = window.WebChat;\n  if (!ReactWebChat) {\n    // 2. 使用 rollup.js build 出可以在其他 react 專案中以 component 引入的 gss-webchat-component.js\n    ReactWebChat = ReactWebChat_Package\n  }\n\n  let webChatProps: any = {\n    ...config,\n    userID: config.userId,\n    username: config.userName,\n    className: `${className || ''} web-chat`,\n    directLine: directLine,\n    store: config.webChatOptions.store,\n    styleSet: createStyleSet(config.webChatOptions.styleOptions),\n    activityMiddleware: activityMiddleware\n  };\n\n  ['botId', 'botName', 'userId', 'userName', 'directLineOptions', 'webChatOptions']\n    .forEach(k => delete webChatProps[k])\n\n  return (\n    directLine ?\n      React.createElement(ReactWebChat, webChatProps)\n      :\n      <div className={`${className || ''} connect-spinner`}>\n        <div className=\"content\">\n          <div className=\"icon\">\n            <span className=\"ms-Icon ms-Icon--Robot\" />\n          </div>\n          <p>連線中，請稍等。</p>\n        </div>\n      </div>\n  );\n}\n"],"file":"WebChat.js"}