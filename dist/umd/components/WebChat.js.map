{"version":3,"sources":["../../../src/components/WebChat.tsx"],"names":["className","React","constructor","memoize","styleOptions","console","createStyleSet","lastHistoryId","next","card","activity","value","type","name","id","render","props","config","webChatOptions","state","ReactWebChat","WebChat","webChatProps","userID","username","directLine","store","styleSet","activityMiddleware","k"],"mappings":"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","sourcesContent":["import memoize from 'memoize-one';\nimport React from 'react';\nimport UnreadTag from './UnreadTag';\nimport WebChat, { createStyleSet } from 'botframework-webchat'\nimport '../styles/WebChat.css';\n\ninterface WebChatProps {\n  className?: string,\n  config: GSSWebChat.IWebChatConfig,\n  directLine: BotFrameworkWebChat.IDirectLine\n}\n\ninterface WebChatState {\n}\n\nexport default class extends React.Component<WebChatProps, WebChatState> {\n  createStyleSet: (styleOptions: BotFrameworkWebChat.IStyleOptions) => any;\n  activityMiddleware: any;\n  unreadTagRef: React.RefObject<UnreadTag>;\n\n  constructor(props: Readonly<WebChatProps>) {\n    super(props);\n\n    this.createStyleSet = memoize((styleOptions: BotFrameworkWebChat.IStyleOptions) => {\n      console.log('createStyleSet');\n\n      return createStyleSet(styleOptions);\n    });\n\n    this.unreadTagRef = React.createRef();\n\n    let lastHistoryId: string = null;\n\n    this.activityMiddleware = () => (next: any) => (card: { activity: { name: string; type: string; id: string; value: any; }; }) => {\n      const {\n        activity: { name, type, id, value }\n      } = card;\n\n      if (type === 'event' && name === 'UnReadInfo') {\n        lastHistoryId = value.lastHistoryId;\n        return () => <UnreadTag key={id} ref={this.unreadTagRef} firstUnreadId={value.firstUnreadId} lastHistoryId={value.lastHistoryId} />;\n      } else if (lastHistoryId && id === lastHistoryId) {\n        return (...renderArgs: any) => (\n          <div\n            key={id}\n            data-key={id}\n          >\n            {next(card)(...renderArgs)}\n          </div>\n        );\n      } else {\n        return next(card);\n      }\n    };\n  }\n\n  render() {\n    const {\n      props: { className, directLine,\n        config: { userId, userName,\n          webChatOptions: { store, styleOptions }\n        }\n      },\n      state: { }\n    } = this;\n\n    let ReactWebChat = WebChat.ReactWebChat || WebChat\n    if (typeof ReactWebChat !== \"function\") {\n      ReactWebChat = <div>Fuck!</div>\n    }\n\n\n    let webChatProps: any = {\n      ...this.props.config,\n      userID: userId,\n      username: userName,\n      className: `${className || ''} web-chat`,\n      directLine: directLine,\n      store: store,\n      styleSet: this.createStyleSet(styleOptions),\n      activityMiddleware: this.activityMiddleware\n    };\n\n    ['botId', 'botName', 'userId', 'userName', 'directLineOptions', 'webChatOptions']\n      .forEach(k => delete webChatProps[k])\n\n    return (\n      directLine ?\n        React.createElement(ReactWebChat, webChatProps)\n        :\n        <div className={`${className || ''} connect-spinner`}>\n          <div className=\"content\">\n            <div className=\"icon\">\n              <span className=\"ms-Icon ms-Icon--Robot\" />\n            </div>\n            <p>連線中，請稍等。</p>\n          </div>\n        </div>\n    );\n  }\n}"],"file":"WebChat.js"}