{"version":3,"sources":["../../../src/utils/Configuration.ts"],"names":["initial","config","directLineOptions","decoded","jwtDecode","Storage","randomUserID","directLinePath","botId","checkWebSocketIsOpen","webChatOptions","webChatButtonOptions","webChatHeaderOptions","styleOptions","bubbleBackground","bubbleBorderColor","bubbleBorderRadius","bubbleBorderStyle","bubbleBorderWidth","bubbleFromUserBackground","bubbleFromUserBorderColor","bubbleFromUserBorderRadius","bubbleFromUserBorderStyle","bubbleFromUserBorderWidth","bubbleFromUserTextColor","botAvatarImage","botAvatarInitials","botName","get","Math","resolve","ws","domain"],"mappings":"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","sourcesContent":["import { createStore } from './Store'\nimport Storage from './Storage'\nimport jwtDecode from 'jwt-decode';\n\nlet config: GSSWebChat.IWebChatConfig\n\nconst initial = async (rawConfig: GSSWebChat.IWebChatConfig): Promise<GSSWebChat.IWebChatConfig> => {\n    config = { ...rawConfig }\n\n    const directLineOptions = config.directLineOptions = { ...config.directLineOptions }\n    const decoded: any = (directLineOptions.token) ? jwtDecode(directLineOptions.token) : {}\n\n    config.botId = (decoded.botId || config.botId).toLowerCase()\n    config.userId = decoded.userId || config.userId || Storage.getUserId() || randomUserID()\n    config.userName = config.userName || ''\n\n    directLineOptions.domain = decoded.origin || directLineOptions.domain\n    const directLinePath = directLineOptions.domain.endsWith('/directline') ? '' : '/directline'\n    directLineOptions.domain += `${directLinePath}/${config.botId}`\n    directLineOptions.webSocket = !(directLineOptions.webSocket === false) && await checkWebSocketIsOpen(directLineOptions.domain)\n    directLineOptions.pollingAutoClose = (directLineOptions.pollingAutoClose === true)\n    directLineOptions.conversationId = decoded.conversationId || directLineOptions.conversationId || Storage.getConversationId() || ''\n    directLineOptions.watermark = 0\n\n    if (!directLineOptions.webSocket && !directLineOptions.pollingAutoClose) {\n        directLineOptions.watermark = -1 //polling watermark 設成 -1 才會先取歷史訊息\n    }\n\n    const webChatOptions = config.webChatOptions = { ...config.webChatOptions } as GSSWebChat.IWebChatOptions\n    const webChatButtonOptions = webChatOptions.buttonOptions = { ...webChatOptions.buttonOptions } as GSSWebChat.IWebChatButtonOptions\n    webChatButtonOptions.iconUrl = webChatButtonOptions.iconUrl || 'https://bot-framework.azureedge.net/bot-icons-v1/bot-framework-default-7.png'\n    webChatButtonOptions.visible = !(webChatButtonOptions.visible === false)\n    webChatButtonOptions.displayOnTheSide = (webChatButtonOptions.displayOnTheSide === true)\n\n    const webChatHeaderOptions = webChatOptions.headerOptions = { ...webChatOptions.headerOptions } as GSSWebChat.IWebChatHeaderOptions\n\n    // default style.\n    const styleOptions = webChatOptions.styleOptions = Object.assign({\n        // Bubble\n        bubbleBackground: '#eceff1',\n        bubbleBorderColor: '#E6E6E6',\n        bubbleBorderRadius: '0px 12px 12px 12px',\n        bubbleBorderStyle: 'solid',\n        bubbleBorderWidth: 1,\n        bubbleFromUserBackground: '#0078d7',\n        bubbleFromUserBorderColor: '#E6E6E6',\n        bubbleFromUserBorderRadius: '12px 0px 12px 12px',\n        bubbleFromUserBorderStyle: 'solid',\n        bubbleFromUserBorderWidth: 1,\n        bubbleFromUserTextColor: '#ffffff',\n\n        // Avatar\n        botAvatarImage: webChatButtonOptions.iconUrl,\n        botAvatarInitials: config.botName\n    }, { ...webChatOptions.styleOptions })\n\n    // createStore.\n    webChatOptions.store = createStore()\n\n    return config\n}\n\nconst get = () => config\n\nconst randomUserID = (): string => `r_${Math.random().toString(36).substr(2, 10)}`\n\n/** 檢查 WebSocket 是否有通 (return true = open) */\nconst checkWebSocketIsOpen = async (domain: string): Promise<boolean> => {\n    return new Promise(function (resolve, reject) {\n        if (!WebSocket) return resolve(false)\n\n        const ws = new WebSocket(domain.replace('http', 'ws'))\n\n        ws.onopen = function () {\n            ws.close()\n            resolve(true)\n        }\n        ws.onerror = function (evt) { resolve(false) }\n    })\n}\n\nexport default {\n    initial,\n    get\n}"],"file":"Configuration.js"}