{"version":3,"sources":["../../../src/utils/Store.ts"],"names":["store","createStore","console","lastHistoryId","historyAlredyLoad","notifyConnectFulfilledObservers","dispatch","next","action","Storage","getDirectLine","Configuration","activity","Container","setTimeout","connectFulfilledObservers","observer","actionObservers","getStore","sendMessage","text","storeDispatch","type","payload","sendPostback","value","sendEvent","sendAnalytics","name","subMetric","setSendBox","setLanguage","language","notifyUserAlreadyRead","DirectLine","watermark","meta","connectFulfilledSubscribe","f","directLine","connectFulfilledUnsubscribe","subscriber","actionSubscribe","actionUnsubscribe","ActionObservable","subscribe","unsubscribe","ConnectFulfilledObservable"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,MAAIA,KAAiC,GAArC,IAAA;;AAEA,QAAMC,WAAW,GAAG,MAAkC;AAClDC,IAAAA,OAAO,CAAPA,GAAAA,CAAAA,mCAAAA;AAEA,QAAIC,aAAa,GAAjB,EAAA;AACA,QAAIC,iBAAiB,GAArB,KAAA;AACA,QAAIC,+BAA+B,GAAnC,KAAA;AAEAL,IAAAA,KAAK,GAAG,MAAM,CAAN,OAAA,CAAA,WAAA,CAAA,EAAA,EAA+B,CAAC;AAAEM,MAAAA;AAAF,KAAD,KAAsCC,IAAD,IAAgCC,MAAD,IAA6C;AACpJN,MAAAA,OAAO,CAAPA,GAAAA,CAAYM,MAAM,CAAlBN,IAAAA;;AAEA,UAAIM,MAAM,CAANA,IAAAA,KAAJ,+BAAA,EAAqD;AACjDH,QAAAA,+BAA+B,GAA/BA,KAAAA;;AACAI,0BAAAA,iBAAAA,CAA0BC,iCAA1BD,cAAAA;;AACAA,0BAAAA,SAAAA,CAAkBE,wBAAAA,GAAAA,GAAlBF,MAAAA;;AACAP,QAAAA,OAAO,CAAPA,GAAAA,CAAY,qCAAqCQ,iCAAjDR,cAAAA;AAJJ,OAAA,MAMK,IAAIM,MAAM,CAANA,IAAAA,KAAJ,+BAAA,EAAqD;AACtD,cAAM;AAAEI,UAAAA;AAAF,YAAeJ,MAAM,CAA3B,OAAA;;AAEA,YAAII,QAAQ,CAARA,IAAAA,KAAAA,OAAAA,IAA6BA,QAAQ,CAARA,IAAAA,KAAjC,YAAA,EAAiE;AAC7DT,UAAAA,aAAa,GAAGS,QAAQ,CAARA,KAAAA,CAAhBT,aAAAA;AACAC,UAAAA,iBAAiB,GAAG,CAApBA,aAAAA;AAFJ,SAAA,MAIK,IAAIA,iBAAiB,IAAIS,oBAAzB,gBAAyBA,EAAzB,EAAuD;AACxDC,UAAAA,UAAU,CAAVA,qBAAU,CAAVA;AADC,SAAA,MAGA,IAAIX,aAAa,IAAIS,QAAQ,CAARA,EAAAA,KAArB,aAAA,EAAoD;AACrDR,UAAAA,iBAAiB,GAAjBA,IAAAA;AACAD,UAAAA,aAAa,GAAbA,IAAAA;AACH;AACJ;;AAED,UAAIC,iBAAiB,IAAI,CAAzB,+BAAA,EAA2D;AACvDF,QAAAA,OAAO,CAAPA,GAAAA,CAAAA,mCAAAA;AACAG,QAAAA,+BAA+B,GAA/BA,IAAAA;AACAS,QAAAA,UAAU,CAAC,MAAMC,yBAAyB,CAAzBA,OAAAA,CAAkCC,QAAQ,IAAIA,QAA/DF,EAAiBC,CAAP,CAAVD;AACH;;AAEDG,MAAAA,eAAe,CAAfA,OAAAA,CAAwBD,QAAQ,IAAIA,QAAQ,CAA5CC,MAA4C,CAA5CA;AAEA,aAAOV,IAAI,CAAX,MAAW,CAAX;AAjCJP,KAAQ,CAARA;AAoCA,WAAA,KAAA;AA3CJ,GAAA;;AA8CA,QAAMkB,QAAQ,GAAG,MAAjB,KAAA;AAEA;AACA;;;AAEA,QAAMC,WAAW,GAAIC,IAAD,IAAkB;AAClCC,IAAAA,aAAa,CAAC;AACVC,MAAAA,IAAI,EADM,uBAAA;AAEVC,MAAAA,OAAO,EAAE;AAAEH,QAAAA;AAAF;AAFC,KAAD,CAAbC;AADJ,GAAA;;AAOA,QAAMG,YAAY,GAAIC,KAAD,IAAgB;AACjCJ,IAAAA,aAAa,CAAC;AACVC,MAAAA,IAAI,EADM,yBAAA;AAEVC,MAAAA,OAAO,EAAE;AAAEE,QAAAA;AAAF;AAFC,KAAD,CAAbJ;AADJ,GAAA;;AAOA,QAAMK,SAAS,GAAG,CAAC;AAAA,IAAA,IAAA;AAAQD,IAAAA;AAAR,GAAD,KAAmD;AACjEJ,IAAAA,aAAa,CAAC;AACVC,MAAAA,IAAI,EADM,qBAAA;AAEVC,MAAAA,OAAO,EAAE;AAAA,QAAA,IAAA;AAAQE,QAAAA;AAAR;AAFC,KAAD,CAAbJ;AADJ,GAAA;;AAOA,QAAMM,aAAa,GAAG,CAAA,MAAA,EAAA,SAAA,KAAwC;AAC1DD,IAAAA,SAAS,CAAC;AAAEE,MAAAA,IAAI,EAAN,eAAA;AAAyBH,MAAAA,KAAK,EAAE;AAAA,QAAA,MAAA;AAAUI,QAAAA;AAAV;AAAhC,KAAD,CAATH;AADJ,GAAA;;AAIA,QAAMI,UAAU,GAAIV,IAAD,IAAkB;AACjCC,IAAAA,aAAa,CAAC;AACVC,MAAAA,IAAI,EADM,uBAAA;AAEVC,MAAAA,OAAO,EAAE;AAAEH,QAAAA;AAAF;AAFC,KAAD,CAAbC;AADJ,GAAA;;AAOA,QAAMU,WAAW,GAAIC,QAAD,IAAsB;AACtCX,IAAAA,aAAa,CAAC;AACVC,MAAAA,IAAI,EADM,uBAAA;AAEVC,MAAAA,OAAO,EAAE;AAAES,QAAAA;AAAF;AAFC,KAAD,CAAbX;AADJ,GAAA;;AAOA,QAAMY,qBAAqB,GAAG,MAAM;AAChC/B,IAAAA,OAAO,CAAPA,GAAAA,CAAY,sCAAsCgC,qBAAlDhC,YAAkDgC,EAAlDhC;AACAwB,IAAAA,SAAS,CAAC;AACNE,MAAAA,IAAI,EADE,iBAAA;AAENH,MAAAA,KAAK,EAAE;AACHU,QAAAA,SAAS,EAAED,qBAAAA,YAAAA;AADR;AAFD,KAAD,CAATR;AAFJ,GAAA,C,CAUA;;;AACA,QAAML,aAAa,GAAG,CAAC;AAAA,IAAA,IAAA;AAAA,IAAA,OAAA;AAAiBe,IAAAA;AAAjB,GAAD,KAA+E;AACjGpC,IAAAA,KAAK,IAAI,KAAK,CAAL,QAAA,CAAe;AAAA,MAAA,IAAA;AAAA,MAAA,OAAA;AAGpBoC,MAAAA;AAHoB,KAAf,CAATpC;AADJ,GAAA;;AAQA,MAAIe,yBAAyC,GAA7C,EAAA;;AACA,QAAMsB,yBAAyB,GAAIC,CAAD,IAAmB;AACjDvB,IAAAA,yBAAyB,CAAzBA,IAAAA,CAAAA,CAAAA;AAEA,UAAMwB,UAAU,GAHiC,gCAGjD,CAHiD,CAKjD;;AACA,QAAIA,UAAU,IAAIA,UAAU,CAAVA,iBAAAA,CAAAA,KAAAA,KAAlB,CAAA,EAA4DD,CAAC;AANjE,GAAA;;AASA,QAAME,2BAA2B,GAAIF,CAAD,IAAmBvB,yBAAyB,GAAGA,yBAAyB,CAAzBA,MAAAA,CAAiC0B,UAAU,IAAIA,UAAU,KAA5I,CAAmF1B,CAAnF;;AAEA,MAAIE,eAA0C,GAA9C,EAAA;;AACA,QAAMyB,eAAe,GAAIJ,CAAD,IAA8BrB,eAAe,CAAfA,IAAAA,CAAtD,CAAsDA,CAAtD;;AACA,QAAM0B,iBAAiB,GAAIL,CAAD,IAA8BrB,eAAe,GAAGA,eAAe,CAAfA,MAAAA,CAAuBwB,UAAU,IAAIA,UAAU,KAAzH,CAA0ExB,CAA1E;;oBAEe;AAAA,IAAA,aAAA;AAAA,IAAA,SAAA;AAAA,IAAA,WAAA;AAAA,IAAA,YAAA;AAAA,IAAA,WAAA;AAAA,IAAA,UAAA;AAAA,IAAA,qBAAA;AAQX2B,IAAAA,gBAAgB,EAAE;AACdC,MAAAA,SAAS,EADK,eAAA;AAEdC,MAAAA,WAAW,EAAEH;AAFC,KARP;AAYXI,IAAAA,0BAA0B,EAAE;AACxBF,MAAAA,SAAS,EADe,yBAAA;AAExBC,MAAAA,WAAW,EAAEN;AAFW;AAZjB,G;UAkBf,W,GAAA,W;UAAA,Q,GAAA,Q;UAAA,a,GAAA,a","sourcesContent":["import DirectLine, { getDirectLine } from './DirectLine';\nimport Storage from './Storage';\nimport Configuration from './Configuration';\nimport Container from './Container';\n\nlet store: BotFrameworkWebChat.IStore = null;\n\nconst createStore = (): BotFrameworkWebChat.IStore => {\n    console.log('==========createStore============');\n\n    let lastHistoryId = '';\n    let historyAlredyLoad = false;\n    let notifyConnectFulfilledObservers = false;\n\n    store = window.WebChat.createStore({}, ({ dispatch }: { dispatch: any }) => (next: (arg0: any) => void) => (action: { type: string; payload: any; }) => {\n        console.log(action.type);\n\n        if (action.type === 'DIRECT_LINE/CONNECT_FULFILLED') {\n            notifyConnectFulfilledObservers = false;\n            Storage.setConversationId(getDirectLine().conversationId);\n            Storage.setUserId(Configuration.get().userId);\n            console.log('getDirectLine().conversationId: ' + getDirectLine().conversationId);\n        }\n        else if (action.type === 'DIRECT_LINE/INCOMING_ACTIVITY') {\n            const { activity } = action.payload;\n\n            if (activity.type === 'event' && activity.name === 'UnReadInfo') {\n                lastHistoryId = activity.value.lastHistoryId;\n                historyAlredyLoad = !lastHistoryId;\n            }\n            else if (historyAlredyLoad && Container.isWebChatVisible()) {\n                setTimeout(notifyUserAlreadyRead)\n            }\n            else if (lastHistoryId && activity.id === lastHistoryId) {\n                historyAlredyLoad = true;\n                lastHistoryId = null;\n            }\n        }\n\n        if (historyAlredyLoad && !notifyConnectFulfilledObservers) {\n            console.log('notify connectFulfilledObservers.');\n            notifyConnectFulfilledObservers = true;\n            setTimeout(() => connectFulfilledObservers.forEach(observer => observer()));\n        }\n\n        actionObservers.forEach(observer => observer(action));\n\n        return next(action);\n    });\n\n    return store;\n}\n\nconst getStore = () => store;\n\n/* actions */\n//ref: https://github.com/Microsoft/BotFramework-WebChat/tree/master/packages/core/src/actions\n\nconst sendMessage = (text: string) => {\n    storeDispatch({\n        type: 'WEB_CHAT/SEND_MESSAGE',\n        payload: { text }\n    });\n}\n\nconst sendPostback = (value: any) => {\n    storeDispatch({\n        type: 'WEB_CHAT/SEND_POST_BACK',\n        payload: { value }\n    });\n}\n\nconst sendEvent = ({ name, value }: { name: string, value: any }) => {\n    storeDispatch({\n        type: 'WEB_CHAT/SEND_EVENT',\n        payload: { name, value }\n    });\n}\n\nconst sendAnalytics = (metric: string, subMetric?: string) => {\n    sendEvent({ name: 'bot_analytics', value: { metric, subMetric } })\n}\n\nconst setSendBox = (text: string) => {\n    storeDispatch({\n        type: 'WEB_CHAT/SET_SEND_BOX',\n        payload: { text }\n    });\n}\n\nconst setLanguage = (language: string) => {\n    storeDispatch({\n        type: 'WEB_CHAT/SET_LANGUAGE',\n        payload: { language }\n    });\n}\n\nconst notifyUserAlreadyRead = () => {\n    console.log('notifyUserAlreadyRead watermark: ' + DirectLine.getWatermark());\n    sendEvent({\n        name: 'UserAlreadyRead',\n        value: {\n            watermark: DirectLine.getWatermark()\n        }\n    });\n}\n\n// store dispatch.\nconst storeDispatch = ({ type, payload, meta }: { type: string, payload: object, meta?: object }) => {\n    store && store.dispatch({\n        type,\n        payload,\n        meta\n    });\n}\n\nlet connectFulfilledObservers: (() => void)[] = [];\nconst connectFulfilledSubscribe = (f: () => void) => {\n    connectFulfilledObservers.push(f);\n\n    const directLine = getDirectLine();\n\n    //connectionStatus$(2) === Online\n    if (directLine && directLine.connectionStatus$.value === 2) f();\n}\n\nconst connectFulfilledUnsubscribe = (f: () => void) => connectFulfilledObservers = connectFulfilledObservers.filter(subscriber => subscriber !== f);\n\nlet actionObservers: ((action: any) => void)[] = [];\nconst actionSubscribe = (f: (action: any) => void) => actionObservers.push(f);\nconst actionUnsubscribe = (f: (action: any) => void) => actionObservers = actionObservers.filter(subscriber => subscriber !== f);\n\nexport default {\n    sendAnalytics,\n    sendEvent,\n    sendMessage,\n    sendPostback,\n    setLanguage,\n    setSendBox,\n    notifyUserAlreadyRead,\n    ActionObservable: {\n        subscribe: actionSubscribe,\n        unsubscribe: actionUnsubscribe\n    },\n    ConnectFulfilledObservable: {\n        subscribe: connectFulfilledSubscribe,\n        unsubscribe: connectFulfilledUnsubscribe\n    }\n};\n\nexport {\n    createStore,\n    getStore,\n    storeDispatch\n};"],"file":"Store.js"}