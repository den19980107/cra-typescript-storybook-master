{"version":3,"sources":["../../../src/components/MinimizableWebChat.tsx"],"names":["React","WebChat","WebChatToggleStateObservable","notify","createDirectLine","endDirectLine","getDirectLine","getRefObject","Store","Configuration","PreviewMessage","MinimizableWebChat","Component","constructor","props","webChatRef","createRef","handleStartDirectLine","bind","handleStopDirectLine","handleMaximizeButtonClick","handleMinimizeButtonClick","handleSwitchButtonClick","state","minimized","side","directLine","defaultDirectLine","messageUnreadCount","previewMessage","componentDidMount","that","ActionObservable","subscribe","action","type","s","webchat","unreadTag","unreadTagRef","notifyUserAlreadyRead","unreadTagDom","unreadTagDomRef","logContainer","parentElement","closest","scrollbarAtTheBottom","clientHeight","scrollTop","scrollHeight","setTimeout","toogle","scrollToTag","moveToBottom","setState","unsubscribe","directLineOptions","get","webSocket","pollingAutoClose","lastHistoryId","subscribeUnReadMessage","activity","payload","botId","from","id","toLowerCase","getState","msg","text","console","log","name","watermark","Math","max","value","count","config","getMessageUnreadCount","render","webChatOptions","buttonOptions","headerOptions","buttonStyle","background","iconUrl","backgroundSize","visible","displayOnTheSide","display"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,4BAAP,IAAuCC,MAAvC,QAAqD,uCAArD;AACA,SAASC,gBAAT,EAA2BC,aAA3B,EAA0CC,aAA1C,QAA+D,qBAA/D;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,aAAP,MAA0B,wBAA1B;AAEA,OAAO,mCAAP;AACA,OAAO,kCAAP;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAeA,eAAe,MAAMC,kBAAN,SAAiCX,KAAK,CAACY,SAAvC,CAAmG;AAG9GC,EAAAA,WAAW,CAACC,KAAD,EAA2C;AAClD,UAAMA,KAAN;AAEA,SAAKC,UAAL,gBAAkBf,KAAK,CAACgB,SAAN,EAAlB;AAEA,SAAKC,qBAAL,GAA6B,KAAKA,qBAAL,CAA2BC,IAA3B,CAAgC,IAAhC,CAA7B;AACA,SAAKC,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BD,IAA1B,CAA+B,IAA/B,CAA5B;AACA,SAAKE,yBAAL,GAAiC,KAAKA,yBAAL,CAA+BF,IAA/B,CAAoC,IAApC,CAAjC;AACA,SAAKG,yBAAL,GAAiC,KAAKA,yBAAL,CAA+BH,IAA/B,CAAoC,IAApC,CAAjC;AACA,SAAKI,uBAAL,GAA+B,KAAKA,uBAAL,CAA6BJ,IAA7B,CAAkC,IAAlC,CAA/B;AAEA,SAAKK,KAAL,GAAa;AACTC,MAAAA,SAAS,EAAE,IADF;AAETC,MAAAA,IAAI,EAAE,OAFG;AAGTC,MAAAA,UAAU,EAAE,KAAKZ,KAAL,CAAWa,iBAHd;AAITC,MAAAA,kBAAkB,EAAE,CAJX;AAKTC,MAAAA,cAAc,EAAE;AALP,KAAb;AAOH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,UAAMC,IAAI,GAAG,IAAb;AAEAvB,IAAAA,KAAK,CAACwB,gBAAN,CAAuBC,SAAvB,CAAiC,SAASA,SAAT,CAAmBC,MAAnB,EAA2B;AACxD,UAAIA,MAAM,CAACC,IAAP,KAAgB,+BAApB,EAAqD;AACjDjC,QAAAA,4BAA4B,CAAC+B,SAA7B,CAAuC,MAAMG,CAAN,IAAW;AAC9C,gBAAMC,OAAO,GAAG,MAAM9B,YAAY,CAACwB,IAAI,CAAChB,UAAN,CAAlC;AACA,gBAAMuB,SAAS,GAAG,MAAM/B,YAAY,CAAC8B,OAAO,CAACE,YAAT,CAApC;;AAEA,cAAIH,CAAC,KAAK,MAAN,IAAgBL,IAAI,CAACR,KAAL,CAAWK,kBAAX,GAAgC,CAApD,EAAuD;AACnDpB,YAAAA,KAAK,CAACgC,qBAAN;AAEA,kBAAMC,YAAY,GAAG,MAAMlC,YAAY,CAAC+B,SAAS,CAACI,eAAX,CAAvC;AACA,kBAAMC,YAAY,GAAGF,YAAY,CAACG,aAAb,CAA2BC,OAA3B,CAAmC,KAAnC,CAArB;AACA,kBAAMC,oBAAoB,GAAGH,YAAY,CAACI,YAAb,GAA4BJ,YAAY,CAACK,SAAzC,IAAsDL,YAAY,CAACM,YAAhG;AAEAC,YAAAA,UAAU,CAAC,MAAMZ,SAAS,CAACa,MAAV,CAAiB,IAAjB,EAAuBC,WAAvB,CAAmC,CAACN,oBAApC,CAAP,CAAV;AACH,WARD,MASK,IAAIV,CAAC,KAAK,OAAV,EAAmB;AACpBE,YAAAA,SAAS,CAACe,YAAV,GAAyBF,MAAzB,CAAgC,KAAhC;AACH;;AAEDpB,UAAAA,IAAI,CAACuB,QAAL,CAAc;AACV1B,YAAAA,kBAAkB,EAAE;AADV,WAAd;AAGH,SApBD;AAsBApB,QAAAA,KAAK,CAACwB,gBAAN,CAAuBuB,WAAvB,CAAmCtB,SAAnC;AACH;AACJ,KA1BD;AA4BA,UAAM;AAAEuB,MAAAA;AAAF,QAAwB/C,aAAa,CAACgD,GAAd,EAA9B;;AAEA,QAAID,iBAAiB,CAACE,SAAlB,IAA+B,CAACF,iBAAiB,CAACG,gBAAtD,EAAwE;AACpE,UAAIC,aAAqB,GAAG,IAA5B;;AACA,YAAMC,sBAAsB,GAAG,MAAM;AACjCrD,QAAAA,KAAK,CAACwB,gBAAN,CAAuBC,SAAvB,CAAiC,SAASA,SAAT,CAAmBC,MAAnB,EAA2B;AACxD,cAAIA,MAAM,CAACC,IAAP,KAAgB,+BAApB,EAAqD;AAAA;;AACjD,kBAAM;AAAE2B,cAAAA;AAAF,gBAAe5B,MAAM,CAAC6B,OAA5B;AACA,kBAAM;AAAEC,cAAAA;AAAF,gBAAYvD,aAAa,CAACgD,GAAd,EAAlB;;AAEA,gBAAIK,QAAQ,CAAC3B,IAAT,KAAkB,SAAlB,IACG,mBAAA2B,QAAQ,CAACG,IAAT,uFAAeC,EAAf,wEAAmBC,WAAnB,QAAqCH,KADxC,IAEG9D,4BAA4B,CAACkE,QAA7B,OAA4C,OAFnD,EAE4D;AAAA;;AAExD,kBAAIC,GAAW,qBAAGP,QAAQ,CAACQ,IAAZ,2DAAoB,kBAAnC;AAEAvC,cAAAA,IAAI,CAACuB,QAAL,CAAe/B,KAAD,KAAY;AACtBK,gBAAAA,kBAAkB,EAAEL,KAAK,CAACK,kBAAN,GAA2B,CADzB;AAEtBC,gBAAAA,cAAc,EAAEwC;AAFM,eAAZ,CAAd;AAIH;AACJ;AACJ,SAjBD;AAkBH,OAnBD;;AAoBAE,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACAhE,MAAAA,KAAK,CAACwB,gBAAN,CAAuBC,SAAvB,CAAiC,SAASA,SAAT,CAAmBC,MAAnB,EAA2B;AACxD,YAAIA,MAAM,CAACC,IAAP,KAAgB,+BAApB,EAAqD;AACjD,gBAAM;AAAE2B,YAAAA;AAAF,cAAe5B,MAAM,CAAC6B,OAA5B;;AAEA,cAAID,QAAQ,CAAC3B,IAAT,KAAkB,OAAlB,IAA6B2B,QAAQ,CAACW,IAAT,KAAkB,YAAnD,EAAiE;AAC7D,kBAAM/C,UAAU,GAAGpB,aAAa,EAAhC;AACAiE,YAAAA,OAAO,CAACC,GAAR,CAAY,4BAA4B9C,UAAU,CAACgD,SAAnD;AACAhD,YAAAA,UAAU,CAACgD,SAAX,GAAuBC,IAAI,CAACC,GAAL,CAASlD,UAAU,CAACgD,SAApB,EAA+B,CAA/B,CAAvB;AAEAd,YAAAA,aAAa,GAAGE,QAAQ,CAACe,KAAT,CAAejB,aAA/B;;AAEA,gBAAIA,aAAJ,EAAmB;AACf,kBAAIE,QAAQ,CAACe,KAAT,CAAeC,KAAnB,EAA0B;AACtB,oBAAI5E,4BAA4B,CAACkE,QAA7B,OAA4C,MAAhD,EAAwD;AACpD5D,kBAAAA,KAAK,CAACgC,qBAAN;AACH,iBAFD,MAGK;AACDT,kBAAAA,IAAI,CAACuB,QAAL,CAAe/B,KAAD,KAAY;AACtBK,oBAAAA,kBAAkB,EAAEL,KAAK,CAACK,kBAAN,GAA2BkC,QAAQ,CAACe,KAAT,CAAeC;AADxC,mBAAZ,CAAd;AAGH;AACJ;AACJ,aAXD,MAYK;AACDP,cAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAX,cAAAA,sBAAsB;AACtBrD,cAAAA,KAAK,CAACwB,gBAAN,CAAuBuB,WAAvB,CAAmCtB,SAAnC;AACH;AACJ,WAxBD,MAyBK,IAAI6B,QAAQ,CAACI,EAAT,KAAgBN,aAApB,EAAmC;AACpCW,YAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAX,YAAAA,sBAAsB;AACtBrD,YAAAA,KAAK,CAACwB,gBAAN,CAAuBuB,WAAvB,CAAmCtB,SAAnC;AACH;AACJ;AACJ,OAnCD;AAoCH;AACJ;;AAED,QAAMhB,qBAAN,GAA8B;AAC1B,QAAI,CAAC,KAAKM,KAAL,CAAWG,UAAhB,EAA4B;AACxB,YAAMqD,MAAM,GAAG,KAAKjE,KAAL,CAAWiE,MAA1B;AAEA,WAAKzB,QAAL,CAAc;AAAE5B,QAAAA,UAAU,EAAE,MAAMtB,gBAAgB,CAAC2E,MAAM,CAACvB,iBAAR;AAApC,OAAd;AACH;AACJ;;AAED,QAAMrC,oBAAN,GAA6B;AACzB,QAAI,KAAKI,KAAL,CAAWG,UAAf,EAA2B;AACvBrB,MAAAA,aAAa;AACb,WAAKiD,QAAL,CAAc;AAAE5B,QAAAA,UAAU,EAAE;AAAd,OAAd;AACH;AACJ;;AAEDN,EAAAA,yBAAyB,GAAG;AACxB,SAAKH,qBAAL;AAEA,SAAKqC,QAAL,CAAc,OAAO;AACjB9B,MAAAA,SAAS,EAAE,KADM;AAEjBK,MAAAA,cAAc,EAAE;AAFC,KAAP,CAAd;AAKA1B,IAAAA,MAAM,CAAC,MAAD,CAAN;AACH;;AAEDkB,EAAAA,yBAAyB,GAAG;AACxB,UAAMmC,iBAAiB,GAAG,KAAK1C,KAAL,CAAWiE,MAAX,CAAkBvB,iBAA5C;;AAEA,QAAI,CAACA,iBAAiB,CAACE,SAAnB,IAAgCF,iBAAiB,CAACG,gBAAtD,EAAwE;AACpE,WAAKxC,oBAAL;AACH;;AAED,SAAKmC,QAAL,CAAc,OAAO;AACjB9B,MAAAA,SAAS,EAAE;AADM,KAAP,CAAd;AAIArB,IAAAA,MAAM,CAAC,OAAD,CAAN;AACH;;AAEDmB,EAAAA,uBAAuB,GAAG;AACtB,SAAKgC,QAAL,CAAc,CAAC;AAAE7B,MAAAA;AAAF,KAAD,MAAe;AACzBA,MAAAA,IAAI,EAAEA,IAAI,KAAK,MAAT,GAAkB,OAAlB,GAA4B;AADT,KAAf,CAAd;AAGH;;AAEDuD,EAAAA,qBAAqB,GAAG;AACpB,WAAO,KAAKzD,KAAL,CAAWK,kBAAlB;AACH;;AAEDqD,EAAAA,MAAM,GAAG;AACL,UAAM;AACFnE,MAAAA,KAAK,EAAE;AACHiE,QAAAA,MADG;AAEHA,QAAAA,MAAM,EAAE;AACJG,UAAAA,cAAc,EAAE;AAAEC,YAAAA,aAAF;AAAiBC,YAAAA;AAAjB;AADZ;AAFL,OADL;AAOF7D,MAAAA,KAAK,EAAE;AAAEC,QAAAA,SAAF;AAAaC,QAAAA,IAAb;AAAmBC,QAAAA,UAAnB;AAA+BE,QAAAA,kBAA/B;AAAmDC,QAAAA;AAAnD;AAPL,QAQF,IARJ;AAUA,UAAMwD,WAAW,GAAG;AAChBC,MAAAA,UAAU,EAAG,OAAMH,aAAa,CAACI,OAAQ,GADzB;AAEhBC,MAAAA,cAAc,EAAE;AAFA,KAApB;AAKA,wBACI;AAAK,MAAA,SAAS,EAAC;AAAf,oBACI,oBAAC,cAAD;AACI,MAAA,OAAO,EAAE,KAAKjE,KAAL,CAAWM,cADxB;AAEI,MAAA,cAAc,EAAE,KAAKT;AAFzB,MADJ,eAKI;AACI,MAAA,SAAS,EAAG,YAAY+D,aAAa,CAACM,OAAd,IAAyBN,aAAa,CAACO,gBAAxC,GAA4D,MAA5D,GAAqE,EAAG,EADnG;AAEI,MAAA,OAAO,EAAE,KAAKtE,yBAFlB;AAGI,MAAA,MAAM,EAAE,CAACI,SAAD,IAAc,CAAC2D,aAAa,CAACM,OAHzC;AAII,MAAA,KAAK,EAAEJ,WAJX;AAKI,8BAAsBzD;AAL1B,MALJ,eAYI;AAAK,MAAA,KAAK,EAAE;AAAE+D,QAAAA,OAAO,EAAEnE,SAAS,GAAG,MAAH,GAAY;AAAhC,OAAZ;AAAkD,MAAA,SAAS,EAAEC,IAAI,KAAK,MAAT,GAAkB,eAAlB,GAAoC;AAAjG,oBACI,oCAEQ2D,aAAa,CAACG,OAAd,iBACA;AAAK,MAAA,SAAS,EAAC,aAAf;AAA6B,MAAA,GAAG,EAAEH,aAAa,CAACG,OAAhD;AAAyD,MAAA,OAAO,EAAE,KAAKlE;AAAvE,MAHR,eAKI;AAAK,MAAA,SAAS,EAAC,QAAf;AAAwB,MAAA,OAAO,EAAE,KAAKA;AAAtC,OACK+D,aAAa,CAACd,IADnB,CALJ,eAQI;AAAQ,MAAA,SAAS,EAAC,QAAlB;AAA2B,MAAA,OAAO,EAAE,KAAKhD;AAAzC,oBACI;AAAM,MAAA,SAAS,EAAC;AAAhB,MADJ,CARJ,eAWI;AAAQ,MAAA,SAAS,EAAC,UAAlB;AAA6B,MAAA,OAAO,EAAE,KAAKD;AAA3C,oBACI;AAAM,MAAA,SAAS,EAAC;AAAhB,MADJ,CAXJ,CADJ,eAgBI,oBAAC,OAAD;AACI,MAAA,GAAG,EAAE,KAAKN,UADd;AAEI,MAAA,SAAS,EAAC,gBAFd;AAGI,MAAA,UAAU,EAAEW,UAHhB;AAII,MAAA,MAAM,EAAEqD;AAJZ,MAhBJ,CAZJ,CADJ;AAsCH;;AA9N6G","sourcesContent":["import React from 'react'\nimport WebChat from './WebChat'\nimport WebChatToggleStateObservable, { notify } from '../utils/WebChatToggleStateObservable'\nimport { createDirectLine, endDirectLine, getDirectLine } from '../utils/DirectLine'\nimport getRefObject from '../utils/getRefObject'\nimport Store from '../utils/Store'\nimport Configuration from '../utils/Configuration'\n\nimport '../styles/fabric-icons-inline.css'\nimport '../styles/MinimizableWebChat.css'\nimport PreviewMessage from './PreviewMessage'\n\ninterface MinimizableWebChatProps {\n    config: GSSWebChat.IWebChatConfig,\n    defaultDirectLine?: BotFrameworkWebChat.IDirectLine\n}\n\ninterface MinimizableWebChatState {\n    minimized: boolean,\n    side: string,\n    directLine: BotFrameworkWebChat.IDirectLine,\n    messageUnreadCount: number,\n    previewMessage: string\n}\n\nexport default class MinimizableWebChat extends React.Component<MinimizableWebChatProps, MinimizableWebChatState> {\n    webChatRef: React.RefObject<WebChat>\n\n    constructor(props: Readonly<MinimizableWebChatProps>) {\n        super(props)\n\n        this.webChatRef = React.createRef()\n\n        this.handleStartDirectLine = this.handleStartDirectLine.bind(this)\n        this.handleStopDirectLine = this.handleStopDirectLine.bind(this)\n        this.handleMaximizeButtonClick = this.handleMaximizeButtonClick.bind(this)\n        this.handleMinimizeButtonClick = this.handleMinimizeButtonClick.bind(this)\n        this.handleSwitchButtonClick = this.handleSwitchButtonClick.bind(this)\n\n        this.state = {\n            minimized: true,\n            side: 'right',\n            directLine: this.props.defaultDirectLine,\n            messageUnreadCount: 0,\n            previewMessage: null\n        }\n    }\n\n    componentDidMount() {\n        const that = this\n\n        Store.ActionObservable.subscribe(function subscribe(action) {\n            if (action.type === 'DIRECT_LINE/CONNECT_FULFILLED') {\n                WebChatToggleStateObservable.subscribe(async s => {\n                    const webchat = await getRefObject(that.webChatRef)\n                    const unreadTag = await getRefObject(webchat.unreadTagRef)\n\n                    if (s === 'open' && that.state.messageUnreadCount > 0) {\n                        Store.notifyUserAlreadyRead()\n\n                        const unreadTagDom = await getRefObject(unreadTag.unreadTagDomRef)\n                        const logContainer = unreadTagDom.parentElement.closest('div')\n                        const scrollbarAtTheBottom = logContainer.clientHeight + logContainer.scrollTop >= logContainer.scrollHeight\n\n                        setTimeout(() => unreadTag.toogle(true).scrollToTag(!scrollbarAtTheBottom))\n                    }\n                    else if (s === 'close') {\n                        unreadTag.moveToBottom().toogle(false)\n                    }\n\n                    that.setState({\n                        messageUnreadCount: 0\n                    })\n                })\n\n                Store.ActionObservable.unsubscribe(subscribe)\n            }\n        })\n\n        const { directLineOptions } = Configuration.get()\n\n        if (directLineOptions.webSocket || !directLineOptions.pollingAutoClose) {\n            let lastHistoryId: string = null\n            const subscribeUnReadMessage = () => {\n                Store.ActionObservable.subscribe(function subscribe(action) {\n                    if (action.type === 'DIRECT_LINE/INCOMING_ACTIVITY') {\n                        const { activity } = action.payload\n                        const { botId } = Configuration.get()\n\n                        if (activity.type === 'message'\n                            && activity.from?.id?.toLowerCase() === botId\n                            && WebChatToggleStateObservable.getState() === 'close') {\n\n                            var msg: string = activity.text ?? '您有一則非純文字訊息，請點選查看';\n\n                            that.setState((state) => ({\n                                messageUnreadCount: state.messageUnreadCount + 1,\n                                previewMessage: msg\n                            }))\n                        }\n                    }\n                })\n            }\n            console.log('subscribe UnReadInfo')\n            Store.ActionObservable.subscribe(function subscribe(action) {\n                if (action.type === 'DIRECT_LINE/INCOMING_ACTIVITY') {\n                    const { activity } = action.payload\n\n                    if (activity.type === 'event' && activity.name === 'UnReadInfo') {\n                        const directLine = getDirectLine()\n                        console.log('directLine.watermark = ' + directLine.watermark)\n                        directLine.watermark = Math.max(directLine.watermark, 0)\n\n                        lastHistoryId = activity.value.lastHistoryId\n\n                        if (lastHistoryId) {\n                            if (activity.value.count) {\n                                if (WebChatToggleStateObservable.getState() === 'open') {\n                                    Store.notifyUserAlreadyRead()\n                                }\n                                else {\n                                    that.setState((state) => ({\n                                        messageUnreadCount: state.messageUnreadCount + activity.value.count\n                                    }))\n                                }\n                            }\n                        }\n                        else {\n                            console.log('subscribe UnReadMessage')\n                            subscribeUnReadMessage()\n                            Store.ActionObservable.unsubscribe(subscribe)\n                        }\n                    }\n                    else if (activity.id === lastHistoryId) {\n                        console.log('subscribe UnReadMessage')\n                        subscribeUnReadMessage()\n                        Store.ActionObservable.unsubscribe(subscribe)\n                    }\n                }\n            })\n        }\n    }\n\n    async handleStartDirectLine() {\n        if (!this.state.directLine) {\n            const config = this.props.config\n\n            this.setState({ directLine: await createDirectLine(config.directLineOptions) })\n        }\n    }\n\n    async handleStopDirectLine() {\n        if (this.state.directLine) {\n            endDirectLine()\n            this.setState({ directLine: null })\n        }\n    }\n\n    handleMaximizeButtonClick() {\n        this.handleStartDirectLine()\n\n        this.setState(() => ({\n            minimized: false,\n            previewMessage: null\n        }))\n\n        notify('open')\n    }\n\n    handleMinimizeButtonClick() {\n        const directLineOptions = this.props.config.directLineOptions\n\n        if (!directLineOptions.webSocket && directLineOptions.pollingAutoClose) {\n            this.handleStopDirectLine()\n        }\n\n        this.setState(() => ({\n            minimized: true\n        }))\n\n        notify('close')\n    }\n\n    handleSwitchButtonClick() {\n        this.setState(({ side }) => ({\n            side: side === 'left' ? 'right' : 'left'\n        }))\n    }\n\n    getMessageUnreadCount() {\n        return this.state.messageUnreadCount\n    }\n\n    render() {\n        const {\n            props: {\n                config,\n                config: {\n                    webChatOptions: { buttonOptions, headerOptions }\n                }\n            },\n            state: { minimized, side, directLine, messageUnreadCount, previewMessage }\n        } = this\n\n        const buttonStyle = {\n            background: `url(${buttonOptions.iconUrl})`,\n            backgroundSize: 'cover'\n        }\n\n        return (\n            <div className=\"minimizable-web-chat\">\n                <PreviewMessage\n                    message={this.state.previewMessage}\n                    maximizeButton={this.handleMaximizeButtonClick}\n                />\n                <button\n                    className={`maximize ${(buttonOptions.visible && buttonOptions.displayOnTheSide) ? 'hide' : ''}`}\n                    onClick={this.handleMaximizeButtonClick}\n                    hidden={!minimized || !buttonOptions.visible}\n                    style={buttonStyle}\n                    message-unread-count={messageUnreadCount}\n                />\n                <div style={{ display: minimized ? 'none' : '' }} className={side === 'left' ? 'chat-box left' : 'chat-box right'}>\n                    <header>\n                        {\n                            headerOptions.iconUrl &&\n                            <img className=\"header-Icon\" src={headerOptions.iconUrl} onClick={this.handleMinimizeButtonClick} />\n                        }\n                        <div className=\"filler\" onClick={this.handleMinimizeButtonClick}>\n                            {headerOptions.text}\n                        </div>\n                        <button className=\"switch\" onClick={this.handleSwitchButtonClick}>\n                            <span className=\"ms-Icon ms-Icon--Switch\" />\n                        </button>\n                        <button className=\"minimize\" onClick={this.handleMinimizeButtonClick}>\n                            <span className=\"ms-Icon ms-Icon--ChromeMinimize\" />\n                        </button>\n                    </header>\n                    <WebChat\n                        ref={this.webChatRef}\n                        className=\"react-web-chat\"\n                        directLine={directLine}\n                        config={config}\n                    />\n                </div>\n            </div>\n        )\n    }\n}"],"file":"MinimizableWebChat.js"}