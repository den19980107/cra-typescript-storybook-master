{"version":3,"sources":["../../../src/components/WebChat.tsx"],"names":["React","useEffect","memoize","UnreadTag","ReactWebChat_Package","createStyleSet","BotFrameworkWebChat_createStyleSet","WebChat","className","config","directLine","activityMiddleware","unreadTagRef","styleOptions","console","log","createRef","lastHistoryId","next","card","activity","name","type","id","value","firstUnreadId","children","ReactWebChat","window","webChatProps","userID","userId","username","userName","store","webChatOptions","styleSet","forEach","k","createElement"],"mappings":"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","sourcesContent":["import React, { ReactElement, useEffect } from 'react'\nimport memoize from 'memoize-one';\nimport UnreadTag from './UnreadTag';\nimport ReactWebChat_Package, { createStyleSet as BotFrameworkWebChat_createStyleSet } from 'botframework-webchat'\nimport '../styles/WebChat.css';\n\ninterface Props {\n  className?: string,\n  config: GSSWebChat.IWebChatConfig,\n  directLine: BotFrameworkWebChat.IDirectLine\n}\n\nexport default function WebChat({ className, config, directLine }: Props): ReactElement {\n  let createStyleSet: (styleOptions: BotFrameworkWebChat.IStyleOptions) => any;\n  let activityMiddleware: any\n  let unreadTagRef: React.RefObject<UnreadTag>;\n\n  createStyleSet = memoize((styleOptions: BotFrameworkWebChat.IStyleOptions) => {\n    console.log('createStyleSet');\n\n    return BotFrameworkWebChat_createStyleSet(styleOptions);\n  });\n\n\n  useEffect(() => {\n    unreadTagRef = React.createRef();\n\n    let lastHistoryId: string | null | undefined = null;\n\n    activityMiddleware = () => (next: (arg0: any) => (arg0: any) => React.ReactNode) => (card: { activity: { name: string; type: string; id: string; value: any; }; }) => {\n      const {\n        activity: { name, type, id, value }\n      } = card;\n\n      if (type === 'event' && name === 'UnReadInfo') {\n        lastHistoryId = value.lastHistoryId;\n        return () => <UnreadTag key={id} ref={unreadTagRef} firstUnreadId={value.firstUnreadId} lastHistoryId={value.lastHistoryId} />;\n      } else if (lastHistoryId && id === lastHistoryId) {\n        return (children: any) => (\n          <div\n            key={id}\n            data-key={id}\n          >\n            {next(card)(children)}\n          </div>\n        );\n      } else {\n        return next(card);\n      }\n    };\n  }, [])\n\n  /**\n   * 引入 ReactWebChat 有分兩種狀況：\n   * \n   * 1. 使用 webpack build 出來的 gss-webchat.js：\n   *    如果是使用 gss-webchat.js 需要在 html 中引入 botframework webchat-es5.js 的 cdn\n   *    所以 ReactWebChat 會從 window 中拿取\n   * \n   * 2. 使用 rollup.js build 出可以在其他 react 專案中以 component 引入的 gss-webchat-component.js：\n   *    使用 gss-webchat-component.js 則是需要 user 在自己的專案中安裝 botframework-webchat 的 npm 套件\n   *    所以 ReactWebChat 會從 package 中拿取\n   */\n\n  // 1. 使用 webpack build 出來的 gss-webchat.js\n  let { ReactWebChat } = window.WebChat;\n  if (!ReactWebChat) {\n    // 2. 使用 rollup.js build 出可以在其他 react 專案中以 component 引入的 gss-webchat-component.js\n    ReactWebChat = ReactWebChat_Package\n  }\n\n  let webChatProps: any = {\n    ...config,\n    userID: config.userId,\n    username: config.userName,\n    className: `${className || ''} web-chat`,\n    directLine: directLine,\n    store: config.webChatOptions.store,\n    styleSet: createStyleSet(config.webChatOptions.styleOptions),\n    activityMiddleware: activityMiddleware\n  };\n\n  ['botId', 'botName', 'userId', 'userName', 'directLineOptions', 'webChatOptions']\n    .forEach(k => delete webChatProps[k])\n\n  return (\n    directLine ?\n      React.createElement(ReactWebChat, webChatProps)\n      :\n      <div className={`${className || ''} connect-spinner`}>\n        <div className=\"content\">\n          <div className=\"icon\">\n            <span className=\"ms-Icon ms-Icon--Robot\" />\n          </div>\n          <p>連線中，請稍等。</p>\n        </div>\n      </div>\n  );\n}\n"],"file":"WebChat.js"}