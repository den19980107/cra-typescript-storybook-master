{"version":3,"sources":["../../../src/components/WebChat.tsx"],"names":["memoize","React","UnreadTag","WebChat","createStyleSet","Component","constructor","props","styleOptions","console","log","unreadTagRef","createRef","lastHistoryId","activityMiddleware","next","card","activity","name","type","id","value","firstUnreadId","renderArgs","render","className","directLine","config","userId","userName","webChatOptions","store","ReactWebChat","webChatProps","userID","username","styleSet","forEach","k","createElement"],"mappings":"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","sourcesContent":["import memoize from 'memoize-one';\nimport React from 'react';\nimport UnreadTag from './UnreadTag';\nimport WebChat, { createStyleSet } from 'botframework-webchat'\nimport '../styles/WebChat.css';\n\ninterface WebChatProps {\n  className?: string,\n  config: GSSWebChat.IWebChatConfig,\n  directLine: BotFrameworkWebChat.IDirectLine\n}\n\ninterface WebChatState {\n}\n\nexport default class extends React.Component<WebChatProps, WebChatState> {\n  createStyleSet: (styleOptions: BotFrameworkWebChat.IStyleOptions) => any;\n  activityMiddleware: any;\n  unreadTagRef: React.RefObject<UnreadTag>;\n\n  constructor(props: Readonly<WebChatProps>) {\n    super(props);\n\n    this.createStyleSet = memoize((styleOptions: BotFrameworkWebChat.IStyleOptions) => {\n      console.log('createStyleSet');\n\n      return createStyleSet(styleOptions);\n    });\n\n    this.unreadTagRef = React.createRef();\n\n    let lastHistoryId: string = null;\n\n    this.activityMiddleware = () => (next: any) => (card: { activity: { name: string; type: string; id: string; value: any; }; }) => {\n      const {\n        activity: { name, type, id, value }\n      } = card;\n\n      if (type === 'event' && name === 'UnReadInfo') {\n        lastHistoryId = value.lastHistoryId;\n        return () => <UnreadTag key={id} ref={this.unreadTagRef} firstUnreadId={value.firstUnreadId} lastHistoryId={value.lastHistoryId} />;\n      } else if (lastHistoryId && id === lastHistoryId) {\n        return (...renderArgs: any) => (\n          <div\n            key={id}\n            data-key={id}\n          >\n            {next(card)(...renderArgs)}\n          </div>\n        );\n      } else {\n        return next(card);\n      }\n    };\n  }\n\n  render() {\n    const {\n      props: { className, directLine,\n        config: { userId, userName,\n          webChatOptions: { store, styleOptions }\n        }\n      }\n    } = this;\n\n    let ReactWebChat = WebChat.ReactWebChat || WebChat\n    if (typeof ReactWebChat !== \"function\") {\n      ReactWebChat = <div>Fuck!</div>\n    }\n\n\n    let webChatProps: any = {\n      ...this.props.config,\n      userID: userId,\n      username: userName,\n      className: `${className || ''} web-chat`,\n      directLine: directLine,\n      store: store,\n      styleSet: this.createStyleSet(styleOptions),\n      activityMiddleware: this.activityMiddleware\n    };\n\n    ['botId', 'botName', 'userId', 'userName', 'directLineOptions', 'webChatOptions']\n      .forEach(k => delete webChatProps[k])\n\n    return (\n      directLine ?\n        React.createElement(ReactWebChat, webChatProps)\n        :\n        <div className={`${className || ''} connect-spinner`}>\n          <div className=\"content\">\n            <div className=\"icon\">\n              <span className=\"ms-Icon ms-Icon--Robot\" />\n            </div>\n            <p>連線中，請稍等。</p>\n          </div>\n        </div>\n    );\n  }\n}"],"file":"WebChat.js"}