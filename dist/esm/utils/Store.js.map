{"version":3,"sources":["../../../src/utils/Store.ts"],"names":["DirectLine","getDirectLine","Storage","Configuration","Container","store","createStore","console","log","lastHistoryId","historyAlredyLoad","notifyConnectFulfilledObservers","window","WebChat","dispatch","next","action","type","setConversationId","conversationId","setUserId","get","userId","activity","payload","name","value","isWebChatVisible","setTimeout","notifyUserAlreadyRead","id","connectFulfilledObservers","forEach","observer","actionObservers","getStore","sendMessage","text","storeDispatch","sendPostback","sendEvent","sendAnalytics","metric","subMetric","setSendBox","setLanguage","language","getWatermark","watermark","meta","connectFulfilledSubscribe","f","push","directLine","connectionStatus$","connectFulfilledUnsubscribe","filter","subscriber","actionSubscribe","actionUnsubscribe","ActionObservable","subscribe","unsubscribe","ConnectFulfilledObservable"],"mappings":"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","sourcesContent":["import DirectLine, { getDirectLine } from './DirectLine';\nimport Storage from './Storage';\nimport Configuration from './Configuration';\nimport Container from './Container';\n\nlet store: BotFrameworkWebChat.IStore = null;\n\nconst createStore = (): BotFrameworkWebChat.IStore => {\n    console.log('==========createStore============');\n\n    let lastHistoryId = '';\n    let historyAlredyLoad = false;\n    let notifyConnectFulfilledObservers = false;\n\n    store = window.WebChat.createStore({}, ({ dispatch }: { dispatch: any }) => (next: (arg0: any) => void) => (action: { type: string; payload: any; }) => {\n        console.log(action.type);\n\n        if (action.type === 'DIRECT_LINE/CONNECT_FULFILLED') {\n            notifyConnectFulfilledObservers = false;\n            Storage.setConversationId(getDirectLine().conversationId);\n            Storage.setUserId(Configuration.get().userId);\n            console.log('getDirectLine().conversationId: ' + getDirectLine().conversationId);\n        }\n        else if (action.type === 'DIRECT_LINE/INCOMING_ACTIVITY') {\n            const { activity } = action.payload;\n\n            if (activity.type === 'event' && activity.name === 'UnReadInfo') {\n                lastHistoryId = activity.value.lastHistoryId;\n                historyAlredyLoad = !lastHistoryId;\n            }\n            else if (historyAlredyLoad && Container.isWebChatVisible()) {\n                setTimeout(notifyUserAlreadyRead)\n            }\n            else if (lastHistoryId && activity.id === lastHistoryId) {\n                historyAlredyLoad = true;\n                lastHistoryId = null;\n            }\n        }\n\n        if (historyAlredyLoad && !notifyConnectFulfilledObservers) {\n            console.log('notify connectFulfilledObservers.');\n            notifyConnectFulfilledObservers = true;\n            setTimeout(() => connectFulfilledObservers.forEach(observer => observer()));\n        }\n\n        actionObservers.forEach(observer => observer(action));\n\n        return next(action);\n    });\n\n    return store;\n}\n\nconst getStore = () => store;\n\n/* actions */\n//ref: https://github.com/Microsoft/BotFramework-WebChat/tree/master/packages/core/src/actions\n\nconst sendMessage = (text: string) => {\n    storeDispatch({\n        type: 'WEB_CHAT/SEND_MESSAGE',\n        payload: { text }\n    });\n}\n\nconst sendPostback = (value: any) => {\n    storeDispatch({\n        type: 'WEB_CHAT/SEND_POST_BACK',\n        payload: { value }\n    });\n}\n\nconst sendEvent = ({ name, value }: { name: string, value: any }) => {\n    storeDispatch({\n        type: 'WEB_CHAT/SEND_EVENT',\n        payload: { name, value }\n    });\n}\n\nconst sendAnalytics = (metric: string, subMetric?: string) => {\n    sendEvent({ name: 'bot_analytics', value: { metric, subMetric } })\n}\n\nconst setSendBox = (text: string) => {\n    storeDispatch({\n        type: 'WEB_CHAT/SET_SEND_BOX',\n        payload: { text }\n    });\n}\n\nconst setLanguage = (language: string) => {\n    storeDispatch({\n        type: 'WEB_CHAT/SET_LANGUAGE',\n        payload: { language }\n    });\n}\n\nconst notifyUserAlreadyRead = () => {\n    console.log('notifyUserAlreadyRead watermark: ' + DirectLine.getWatermark());\n    sendEvent({\n        name: 'UserAlreadyRead',\n        value: {\n            watermark: DirectLine.getWatermark()\n        }\n    });\n}\n\n// store dispatch.\nconst storeDispatch = ({ type, payload, meta }: { type: string, payload: object, meta?: object }) => {\n    store && store.dispatch({\n        type,\n        payload,\n        meta\n    });\n}\n\nlet connectFulfilledObservers: (() => void)[] = [];\nconst connectFulfilledSubscribe = (f: () => void) => {\n    connectFulfilledObservers.push(f);\n\n    const directLine = getDirectLine();\n\n    //connectionStatus$(2) === Online\n    if (directLine && directLine.connectionStatus$.value === 2) f();\n}\n\nconst connectFulfilledUnsubscribe = (f: () => void) => connectFulfilledObservers = connectFulfilledObservers.filter(subscriber => subscriber !== f);\n\nlet actionObservers: ((action: any) => void)[] = [];\nconst actionSubscribe = (f: (action: any) => void) => actionObservers.push(f);\nconst actionUnsubscribe = (f: (action: any) => void) => actionObservers = actionObservers.filter(subscriber => subscriber !== f);\n\nexport default {\n    sendAnalytics,\n    sendEvent,\n    sendMessage,\n    sendPostback,\n    setLanguage,\n    setSendBox,\n    notifyUserAlreadyRead,\n    ActionObservable: {\n        subscribe: actionSubscribe,\n        unsubscribe: actionUnsubscribe\n    },\n    ConnectFulfilledObservable: {\n        subscribe: connectFulfilledSubscribe,\n        unsubscribe: connectFulfilledUnsubscribe\n    }\n};\n\nexport {\n    createStore,\n    getStore,\n    storeDispatch\n};"],"file":"Store.js"}